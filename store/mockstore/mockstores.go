// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_context_and_mock.go -o1 context.go -o2 mockstore/mockstores.go -o3 cli/cli.go
//
// Called via:
//
//   go generate
//

package mockstore

import (
	srcstore "sourcegraph.com/sourcegraph/srclib/store"
	"src.sourcegraph.com/sourcegraph/store"
)

// Stores has a field for each store interface with the concrete mock type (to obviate the need for tedious type assertions in test code).
type Stores struct {
	Accounts                        Accounts
	Authorizations                  Authorizations
	BuildLogs                       BuildLogs
	Builds                          Builds
	Changesets                      Changesets
	Directory                       Directory
	Discussions                     Discussions
	ExternalAuthTokens              ExternalAuthTokens
	Graph                           srcstore.MockMultiRepoStore
	MirroredRepoSSHKeys             MirroredRepoSSHKeys
	Orgs                            Orgs
	Password                        Password
	RegisteredClients               RegisteredClients
	RepoConfigs                     RepoConfigs
	RepoCounters                    RepoCounters
	RepoOrigin                      RepoOrigin
	RepoOriginWithAuthorizedSSHKeys RepoOriginWithAuthorizedSSHKeys
	RepoOriginWithCommitStatuses    RepoOriginWithCommitStatuses
	RepoOriginWithPushHooks         RepoOriginWithPushHooks
	RepoStatuses                    RepoStatuses
	RepoVCS                         RepoVCS
	Repos                           Repos
	Storage                         Storage
	UserKeys                        UserKeys
	UserPermissions                 UserPermissions
	Users                           Users
}

func (s *Stores) Stores() store.Stores {
	return store.Stores{
		Accounts:                        &s.Accounts,
		Authorizations:                  &s.Authorizations,
		BuildLogs:                       &s.BuildLogs,
		Builds:                          &s.Builds,
		Changesets:                      &s.Changesets,
		Directory:                       &s.Directory,
		Discussions:                     &s.Discussions,
		ExternalAuthTokens:              &s.ExternalAuthTokens,
		Graph:                           &s.Graph,
		MirroredRepoSSHKeys:             &s.MirroredRepoSSHKeys,
		Orgs:                            &s.Orgs,
		Password:                        &s.Password,
		RegisteredClients:               &s.RegisteredClients,
		RepoConfigs:                     &s.RepoConfigs,
		RepoCounters:                    &s.RepoCounters,
		RepoOrigin:                      &s.RepoOrigin,
		RepoOriginWithAuthorizedSSHKeys: &s.RepoOriginWithAuthorizedSSHKeys,
		RepoOriginWithCommitStatuses:    &s.RepoOriginWithCommitStatuses,
		RepoOriginWithPushHooks:         &s.RepoOriginWithPushHooks,
		RepoStatuses:                    &s.RepoStatuses,
		RepoVCS:                         &s.RepoVCS,
		Repos:                           &s.Repos,
		Storage:                         &s.Storage,
		UserKeys:                        &s.UserKeys,
		UserPermissions:                 &s.UserPermissions,
		Users:                           &s.Users,
	}
}
