// generated by gen-mocks; DO NOT EDIT

package mockstore

import (
	"golang.org/x/net/context"
	"src.sourcegraph.com/sourcegraph/auth"
	"src.sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"
	"src.sourcegraph.com/sourcegraph/store"
)

type Users struct {
	Get_          func(ctx context.Context, user sourcegraph.UserSpec) (*sourcegraph.User, error)
	GetWithEmail_ func(ctx context.Context, emailAddr sourcegraph.EmailAddr) (*sourcegraph.User, error)
	List_         func(ctx context.Context, opt *sourcegraph.UsersListOptions) ([]*sourcegraph.User, error)
	ListEmails_   func(v0 context.Context, v1 sourcegraph.UserSpec) ([]*sourcegraph.EmailAddr, error)
	Count_        func(v0 context.Context) (int32, error)
}

func (s *Users) Get(ctx context.Context, user sourcegraph.UserSpec) (*sourcegraph.User, error) {
	return s.Get_(ctx, user)
}

func (s *Users) GetWithEmail(ctx context.Context, emailAddr sourcegraph.EmailAddr) (*sourcegraph.User, error) {
	return s.GetWithEmail_(ctx, emailAddr)
}

func (s *Users) List(ctx context.Context, opt *sourcegraph.UsersListOptions) ([]*sourcegraph.User, error) {
	return s.List_(ctx, opt)
}

func (s *Users) ListEmails(v0 context.Context, v1 sourcegraph.UserSpec) ([]*sourcegraph.EmailAddr, error) {
	return s.ListEmails_(v0, v1)
}

func (s *Users) Count(v0 context.Context) (int32, error) { return s.Count_(v0) }

var _ store.Users = (*Users)(nil)

type Accounts struct {
	Create_               func(ctx context.Context, newUser *sourcegraph.User) (*sourcegraph.User, error)
	GetByGitHubID_        func(ctx context.Context, id int) (*sourcegraph.User, error)
	Update_               func(v0 context.Context, v1 *sourcegraph.User) error
	UpdateEmails_         func(v0 context.Context, v1 sourcegraph.UserSpec, v2 []*sourcegraph.EmailAddr) error
	RequestPasswordReset_ func(v0 context.Context, v1 *sourcegraph.User) (*sourcegraph.PasswordResetToken, error)
	ResetPassword_        func(v0 context.Context, v1 *sourcegraph.NewPassword) error
	Delete_               func(v0 context.Context, v1 int32) error
}

func (s *Accounts) Create(ctx context.Context, newUser *sourcegraph.User) (*sourcegraph.User, error) {
	return s.Create_(ctx, newUser)
}

func (s *Accounts) GetByGitHubID(ctx context.Context, id int) (*sourcegraph.User, error) {
	return s.GetByGitHubID_(ctx, id)
}

func (s *Accounts) Update(v0 context.Context, v1 *sourcegraph.User) error { return s.Update_(v0, v1) }

func (s *Accounts) UpdateEmails(v0 context.Context, v1 sourcegraph.UserSpec, v2 []*sourcegraph.EmailAddr) error {
	return s.UpdateEmails_(v0, v1, v2)
}

func (s *Accounts) RequestPasswordReset(v0 context.Context, v1 *sourcegraph.User) (*sourcegraph.PasswordResetToken, error) {
	return s.RequestPasswordReset_(v0, v1)
}

func (s *Accounts) ResetPassword(v0 context.Context, v1 *sourcegraph.NewPassword) error {
	return s.ResetPassword_(v0, v1)
}

func (s *Accounts) Delete(v0 context.Context, v1 int32) error { return s.Delete_(v0, v1) }

var _ store.Accounts = (*Accounts)(nil)

type Invites struct {
	CreateOrUpdate_ func(ctx context.Context, invite *sourcegraph.AccountInvite) (string, error)
	Retrieve_       func(ctx context.Context, token string) (*sourcegraph.AccountInvite, error)
	MarkUnused_     func(ctx context.Context, token string) error
	Delete_         func(ctx context.Context, token string) error
	DeleteByEmail_  func(ctx context.Context, email string) error
	List_           func(ctx context.Context) ([]*sourcegraph.AccountInvite, error)
}

func (s *Invites) CreateOrUpdate(ctx context.Context, invite *sourcegraph.AccountInvite) (string, error) {
	return s.CreateOrUpdate_(ctx, invite)
}

func (s *Invites) Retrieve(ctx context.Context, token string) (*sourcegraph.AccountInvite, error) {
	return s.Retrieve_(ctx, token)
}

func (s *Invites) MarkUnused(ctx context.Context, token string) error {
	return s.MarkUnused_(ctx, token)
}

func (s *Invites) Delete(ctx context.Context, token string) error { return s.Delete_(ctx, token) }

func (s *Invites) DeleteByEmail(ctx context.Context, email string) error {
	return s.DeleteByEmail_(ctx, email)
}

func (s *Invites) List(ctx context.Context) ([]*sourcegraph.AccountInvite, error) { return s.List_(ctx) }

var _ store.Invites = (*Invites)(nil)

type Directory struct {
	GetUserByEmail_ func(ctx context.Context, email string) (*sourcegraph.UserSpec, error)
}

func (s *Directory) GetUserByEmail(ctx context.Context, email string) (*sourcegraph.UserSpec, error) {
	return s.GetUserByEmail_(ctx, email)
}

var _ store.Directory = (*Directory)(nil)

type UserKeys struct {
	AddKey_     func(ctx context.Context, uid int32, key sourcegraph.SSHPublicKey) error
	LookupUser_ func(ctx context.Context, key sourcegraph.SSHPublicKey) (*sourcegraph.UserSpec, error)
	DeleteKey_  func(ctx context.Context, uid int32) error
	ListKeys_   func(ctx context.Context, uid uint32) ([]sourcegraph.SSHPublicKey, error)
}

func (s *UserKeys) AddKey(ctx context.Context, uid int32, key sourcegraph.SSHPublicKey) error {
	return s.AddKey_(ctx, uid, key)
}

func (s *UserKeys) LookupUser(ctx context.Context, key sourcegraph.SSHPublicKey) (*sourcegraph.UserSpec, error) {
	return s.LookupUser_(ctx, key)
}

func (s *UserKeys) DeleteKey(ctx context.Context, uid int32) error { return s.DeleteKey_(ctx, uid) }

func (s *UserKeys) ListKeys(ctx context.Context, uid uint32) ([]sourcegraph.SSHPublicKey, error) {
	return s.ListKeys_(ctx, uid)
}

var _ store.UserKeys = (*UserKeys)(nil)

type ExternalAuthTokens struct {
	GetUserToken_ func(ctx context.Context, user int, host, clientID string) (*auth.ExternalAuthToken, error)
	SetUserToken_ func(ctx context.Context, tok *auth.ExternalAuthToken) error
}

func (s *ExternalAuthTokens) GetUserToken(ctx context.Context, user int, host, clientID string) (*auth.ExternalAuthToken, error) {
	return s.GetUserToken_(ctx, user, host, clientID)
}

func (s *ExternalAuthTokens) SetUserToken(ctx context.Context, tok *auth.ExternalAuthToken) error {
	return s.SetUserToken_(ctx, tok)
}

var _ store.ExternalAuthTokens = (*ExternalAuthTokens)(nil)
