// generated by gen-mocks; DO NOT EDIT

package mockstore

import (
	"time"

	"golang.org/x/net/context"
	"sourcegraph.com/sourcegraph/go-vcs/vcs"
	"sourcegraph.com/sourcegraph/vcsstore/vcsclient"
	"src.sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"
	"src.sourcegraph.com/sourcegraph/pkg/gitproto"
	"src.sourcegraph.com/sourcegraph/store"
)

type Repos struct {
	Get_      func(ctx context.Context, repo string) (*sourcegraph.Repo, error)
	GetPerms_ func(ctx context.Context, repo string) (*sourcegraph.RepoPermissions, error)
	List_     func(v0 context.Context, v1 *sourcegraph.RepoListOptions) ([]*sourcegraph.Repo, error)
	Create_   func(v0 context.Context, v1 *sourcegraph.Repo) (*sourcegraph.Repo, error)
	Update_   func(v0 context.Context, v1 *sourcegraph.ReposUpdateOp) error
	Delete_   func(ctx context.Context, repo string) error
}

func (s *Repos) Get(ctx context.Context, repo string) (*sourcegraph.Repo, error) {
	return s.Get_(ctx, repo)
}

func (s *Repos) GetPerms(ctx context.Context, repo string) (*sourcegraph.RepoPermissions, error) {
	return s.GetPerms_(ctx, repo)
}

func (s *Repos) List(v0 context.Context, v1 *sourcegraph.RepoListOptions) ([]*sourcegraph.Repo, error) {
	return s.List_(v0, v1)
}

func (s *Repos) Create(v0 context.Context, v1 *sourcegraph.Repo) (*sourcegraph.Repo, error) {
	return s.Create_(v0, v1)
}

func (s *Repos) Update(v0 context.Context, v1 *sourcegraph.ReposUpdateOp) error {
	return s.Update_(v0, v1)
}

func (s *Repos) Delete(ctx context.Context, repo string) error { return s.Delete_(ctx, repo) }

var _ store.Repos = (*Repos)(nil)

type RepoConfigs struct {
	Get_    func(ctx context.Context, repo string) (*sourcegraph.RepoConfig, error)
	Update_ func(ctx context.Context, repo string, conf sourcegraph.RepoConfig) error
}

func (s *RepoConfigs) Get(ctx context.Context, repo string) (*sourcegraph.RepoConfig, error) {
	return s.Get_(ctx, repo)
}

func (s *RepoConfigs) Update(ctx context.Context, repo string, conf sourcegraph.RepoConfig) error {
	return s.Update_(ctx, repo, conf)
}

var _ store.RepoConfigs = (*RepoConfigs)(nil)

type RepoStatuses struct {
	GetCombined_ func(ctx context.Context, repoRev sourcegraph.RepoRevSpec) (*sourcegraph.CombinedStatus, error)
	Create_      func(ctx context.Context, repoRev sourcegraph.RepoRevSpec, status *sourcegraph.RepoStatus) error
}

func (s *RepoStatuses) GetCombined(ctx context.Context, repoRev sourcegraph.RepoRevSpec) (*sourcegraph.CombinedStatus, error) {
	return s.GetCombined_(ctx, repoRev)
}

func (s *RepoStatuses) Create(ctx context.Context, repoRev sourcegraph.RepoRevSpec, status *sourcegraph.RepoStatus) error {
	return s.Create_(ctx, repoRev, status)
}

var _ store.RepoStatuses = (*RepoStatuses)(nil)

type RepoCounters struct {
	RecordHit_ func(ctx context.Context, repo string) error
	CountHits_ func(ctx context.Context, repo string, since time.Time) (int, error)
}

func (s *RepoCounters) RecordHit(ctx context.Context, repo string) error {
	return s.RecordHit_(ctx, repo)
}

func (s *RepoCounters) CountHits(ctx context.Context, repo string, since time.Time) (int, error) {
	return s.CountHits_(ctx, repo, since)
}

var _ store.RepoCounters = (*RepoCounters)(nil)

type RepoVCS struct {
	Open_             func(ctx context.Context, repo string) (vcs.Repository, error)
	Clone_            func(ctx context.Context, repo string, info *vcsclient.CloneInfo) error
	OpenGitTransport_ func(ctx context.Context, repo string) (gitproto.Transport, error)
}

func (s *RepoVCS) Open(ctx context.Context, repo string) (vcs.Repository, error) {
	return s.Open_(ctx, repo)
}

func (s *RepoVCS) Clone(ctx context.Context, repo string, info *vcsclient.CloneInfo) error {
	return s.Clone_(ctx, repo, info)
}

func (s *RepoVCS) OpenGitTransport(ctx context.Context, repo string) (gitproto.Transport, error) {
	return s.OpenGitTransport_(ctx, repo)
}

var _ store.RepoVCS = (*RepoVCS)(nil)
