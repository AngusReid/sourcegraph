// Code generated by go-bindata.
// sources:
// assets/changeset.html
// assets/list.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _changesetHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x29\x4e\x2e\xca\x2c\x28\x51\xc8\x4c\xcf\xcb\x2f\x4a\xd5\x4d\x2e\x2e\xb0\xe3\xe2\x2c\xcf\xcc\x4b\xc9\x2f\xd7\x2b\x28\x4a\xcd\xc9\x4f\x4c\x49\x4d\x09\x4a\x2d\xcb\x4c\x2d\x77\x49\x2c\x49\x54\xb0\x55\xf0\x0a\xf6\xf7\xd3\x2b\x48\x2c\x2a\x4e\xd5\x50\xaa\xae\xce\x2a\xce\xcf\x53\xd0\xab\xad\x55\xd2\xb4\xe6\xb2\xd1\x87\x18\x66\xc7\x65\x93\x92\x59\xa6\x90\x99\x62\xab\xe4\x9c\x9f\x92\x0a\xd1\x1d\x06\xc4\x4a\x76\x36\xfa\x40\x19\x3b\x2e\x40\x00\x00\x00\xff\xff\x49\x08\x70\x61\x76\x00\x00\x00")

func changesetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_changesetHtml,
		"changeset.html",
	)
}

func changesetHtml() (*asset, error) {
	bytes, err := changesetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "changeset.html", size: 118, mode: os.FileMode(436), modTime: time.Unix(1445129023, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _listHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xdd\x6e\xdb\x3c\x0c\xbd\x4e\x9f\x82\xc8\xd7\x8b\x6f\x17\x56\x76\x3d\xb8\x19\xb2\xf4\x62\x05\xba\x0d\xe8\xda\x07\x50\x6c\x36\x11\xa0\x48\xae\x24\xa7\x0d\x0c\xbf\xfb\xa8\x1f\x3b\x76\xd3\x2c\x2d\x66\xc4\x30\x1d\x1e\x92\x47\x3c\xa4\xf3\x52\xec\xa0\x90\xdc\xda\xab\x69\xb1\xe1\x6a\x8d\x16\x5d\x26\x85\x75\xd3\xf9\xc5\x24\xaf\xe5\xb1\xd3\xf1\x95\x05\xc5\x77\xfe\x0e\x2f\x1e\x39\xc9\xa5\xe8\xa0\x4d\x23\x1e\x81\xfd\xaa\xe8\x87\xaa\x6d\x79\xe1\xc4\x0e\x9b\x06\x55\xd9\xb6\x01\x3b\xc9\x39\x6c\x0c\x3e\x7a\xe8\x25\xfb\xc6\x2d\x3e\xdc\xdd\x78\x5f\x6e\x2b\xae\xba\x34\x9a\xe2\x0a\xad\x20\x3d\xb3\xb5\x70\x59\x55\x4b\x99\x19\x7c\xaa\xd1\x13\xcc\x67\x1e\x3f\xf7\x65\xf2\x19\x0f\x2c\x66\x52\x9c\x62\xb3\x94\xda\x62\xf9\x01\x3e\x5f\x8b\x10\x71\xe5\x4c\x8d\x67\xb8\xbd\xf4\x64\x62\x95\x31\x9d\x7c\x56\xcb\xf9\xc5\x85\x2f\x93\xe2\x57\x4e\x01\xdd\x99\x5d\xaf\x64\x8d\x50\xe8\x6d\xc5\x0d\xd2\xc9\x76\x02\x9f\xa7\x3d\x99\xda\xc8\x7b\xbd\x8c\x4e\xb8\x64\x4b\xf7\x92\x18\x9f\x6d\x54\xca\xd8\xd3\x82\xa5\x41\xee\x10\x38\x28\x7c\x86\x5e\x4c\xcf\x8d\x7b\x6a\x74\x70\x83\x95\x86\x2f\x57\xc0\xee\xc8\x60\xa1\x03\x9e\xf3\xc9\x01\xf1\xda\x53\x1d\xe5\x50\x85\x61\x99\x84\x4e\xe3\x13\xfc\x2f\x51\x01\xbb\x25\xc8\x27\xf8\x4c\x49\x7c\x83\xdf\xcc\x82\xdb\xca\xed\xd3\xb0\xfd\xd4\x70\xa4\x54\xec\x3f\x29\x25\x2d\xb6\xad\x26\x99\x93\x6a\x87\x03\x58\x96\xcf\x28\x77\x2c\x1f\x71\xa1\x1e\x71\x93\x18\xb4\x25\x7b\xa5\xcb\x7d\xb4\x09\x64\x7c\x64\xa4\x17\xb1\x01\x62\x92\xdf\xdb\x65\xc7\x34\x24\xc9\x0a\xa4\x99\x13\xe5\xb4\x47\x9c\x38\xcd\x08\x32\x1c\xa9\xa8\x62\x87\x8b\x3a\x02\xbb\xb9\xf6\x5a\xfe\xd7\x34\xc1\x4a\x03\x93\x62\xbb\x23\xa5\x37\x57\x9e\x61\xe7\x84\x93\x78\x96\xe0\x6b\xd4\x7b\x39\x12\xc5\x7b\x1f\xfa\x57\x96\x27\x6a\xda\x0a\x8b\x61\x49\xa7\x61\x8b\x86\x04\xa0\xa4\xd7\x28\x1d\xff\x4d\x00\xf6\x1d\x79\x49\x63\xb7\x23\x65\x85\x72\x7a\xec\xf4\xfb\x18\x9d\x1f\x2b\xcd\x6b\xb7\xd1\x66\x58\x7c\xb5\x87\xc3\x0a\x46\x77\xa6\xf8\x16\x5f\x2d\xdc\x83\x45\x03\x6c\x11\xfc\xec\x56\xaf\x85\xea\xbe\x13\xe9\x8a\x83\x1a\x01\x6d\x4b\x64\xc7\xd8\x34\xa4\x83\x3e\xff\xa3\xb8\xdb\xf7\x68\x3b\x02\x25\x8a\x71\x91\x16\x6e\x48\x26\xb9\x7e\x78\x15\x88\x65\x50\xa3\xdf\xb1\x7e\xe3\xc2\x96\x35\x8d\x4f\xbb\x58\xeb\xb7\x33\x0d\x17\x2e\x5d\x7e\x47\xb1\x1c\x05\x86\xef\xce\x71\xe4\xa8\x43\xa7\x7b\x42\xb6\xe9\x57\xf7\x10\x44\x7f\xf7\x4b\x4d\x76\xb7\xec\x3d\x24\x25\x4c\x8f\x3f\x01\x00\x00\xff\xff\x9d\x8a\xeb\x01\xe5\x06\x00\x00")

func listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_listHtml,
		"list.html",
	)
}

func listHtml() (*asset, error) {
	bytes, err := listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.html", size: 1765, mode: os.FileMode(436), modTime: time.Unix(1445129023, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"changeset.html": changesetHtml,
	"list.html": listHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"changeset.html": &bintree{changesetHtml, map[string]*bintree{
	}},
	"list.html": &bintree{listHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

