machine:
  services:
    - docker
    - postgresql
  environment:
    REPO: ../.go_workspace/src/src.sourcegraph.com/sourcegraph
    PGUSER: ubuntu
    PGDATABASE: circle_test
    PGSSLMODE: disable
    PATH: $HOME/protobuf/bin:$HOME/google-cloud-sdk/bin:$PATH
    LD_LIBRARY_PATH: $HOME/protobuf/lib
    CLOUDSDK_CORE_DISABLE_PROMPTS: 1
    LONG_VERSION: $(date +%y%m%d)-$CIRCLE_BUILD_NUM-${CIRCLE_SHA1:0:7}

    # Don't block on `git diff` invocations of `less`.
    GIT_PAGER:
  node:
    version: 4.1.0

dependencies:
  pre:
    # Use go1.5
    - cd /usr/local && sudo rm -rf go && curl https://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz | sudo tar -xz && sudo chmod -R a+rwx /usr/local/go

  cache_directories:
    - ~/protobuf
    - ~/google-cloud-sdk
    - ~/daemonize
    - ~/curl

  override:
    - rm -rf $HOME/.go_workspace/src
    - mkdir -p $HOME/.go_workspace/src/src.sourcegraph.com
    - cp -r $PWD $REPO

    - go get github.com/tools/godep

    - git config --global user.email "ci@example.com"
    - git config --global user.name "CI User"

    - if [ ! -d ~/protobuf ]; then $REPO/dev/install_protobuf.sh $PWD/build/ && mv ./build/usr/local $HOME/protobuf; fi
    - if [ ! -d ~/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash; fi
    - if [ ! -d ~/daemonize ]; then mkdir ~/daemonize; package/linux/scripts/install_daemonize.sh ~/daemonize/; fi

test:
  override:
    - godep go install -v src.sourcegraph.com/sourcegraph/...
    - ./sh/gofmt.sh:
        pwd: $REPO
    - npm run dep:
        pwd: $REPO/app
    - npm test:
        pwd: $REPO/app
    - make check:
        pwd: $REPO
    - set -o pipefail; make mdtest TESTFLAGS="-test.v -test.timeout 5m" | tee $HOME/mdtest.out:
        pwd: $REPO
    - make smoke:
        pwd: $REPO
  post:
    - grep '^FAIL' $HOME/mdtest.out || true

    - go get github.com/jstemmer/go-junit-report
    - mkdir -p $CIRCLE_TEST_REPORTS/junit
    - go-junit-report < $HOME/mdtest.out > $CIRCLE_TEST_REPORTS/junit/mdtest.xml

    - npm run graph:
        pwd: $REPO/app
    - cp $REPO/app/artifacts/* $CIRCLE_ARTIFACTS

deployment:
  master-branch:
    branch: master
    commands:
      - ./circle-build-docker-image.sh $LONG_VERSION:
          pwd: $REPO
      - docker tag us.gcr.io/sourcegraph-dev/sourcegraph:$LONG_VERSION us.gcr.io/sourcegraph-dev/sourcegraph:latest
      - gcloud docker push us.gcr.io/sourcegraph-dev/sourcegraph:latest
      - curl "http://circleci:$DEPLOY_BOT_PASSWORD@deploy-bot.sourcegraph.com/deploy?branch=master&version=$LONG_VERSION"
      - echo $LONG_VERSION | gsutil cp - gs://sourcegraph-metadata/latest-successful-build

  next-branch:
    branch: next
    commands:
      - ./circle-build-docker-image.sh $LONG_VERSION:
          pwd: $REPO
      - curl "http://circleci:$DEPLOY_BOT_PASSWORD@deploy-bot.sourcegraph.com/deploy?branch=next&version=$LONG_VERSION"

  release-tag:
    tag: /[0-9]+\.[0-9]+\.[0-9]+/
    commands:
      - grep "# $VERSION" release_notes.md # fail if version is not mentioned in release notes
      - ./circle-build-docker-image.sh $CIRCLE_TAG:
          pwd: $REPO
      - curl "http://circleci:$DEPLOY_BOT_PASSWORD@deploy-bot.sourcegraph.com/deploy?branch=release&version=$CIRCLE_TAG"

      # push to Docker Hub
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
      - docker tag us.gcr.io/sourcegraph-dev/sourcegraph:$CIRCLE_TAG sourcegraph/sourcegraph:$CIRCLE_TAG
      - docker tag us.gcr.io/sourcegraph-dev/sourcegraph:$CIRCLE_TAG sourcegraph/sourcegraph:latest
      - docker push sourcegraph/sourcegraph:$CIRCLE_TAG
      - docker push sourcegraph/sourcegraph:latest
