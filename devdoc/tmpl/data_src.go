// Code generated by go-bindata.
// sources:
// tmpl/api.html
// tmpl/community.html
// tmpl/doc/common.html
// tmpl/doc/filemap.xml
// tmpl/doc/index.html
// tmpl/doc/menu.html
// tmpl/doc/proto.html
// tmpl/doc/service.html
// tmpl/enable.html
// tmpl/error.html
// tmpl/layout.html
// tmpl/libraries.html
// tmpl/root.html
// DO NOT EDIT!

// +build dev

package tmpl

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// apiHtml reads file data from disk. It returns an error on failure.
func apiHtml() (*asset, error) {
	path := filepath.Join(rootDir, "api.html")
	name := "api.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// communityHtml reads file data from disk. It returns an error on failure.
func communityHtml() (*asset, error) {
	path := filepath.Join(rootDir, "community.html")
	name := "community.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// docCommonHtml reads file data from disk. It returns an error on failure.
func docCommonHtml() (*asset, error) {
	path := filepath.Join(rootDir, "doc/common.html")
	name := "doc/common.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// docFilemapXml reads file data from disk. It returns an error on failure.
func docFilemapXml() (*asset, error) {
	path := filepath.Join(rootDir, "doc/filemap.xml")
	name := "doc/filemap.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// docIndexHtml reads file data from disk. It returns an error on failure.
func docIndexHtml() (*asset, error) {
	path := filepath.Join(rootDir, "doc/index.html")
	name := "doc/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// docMenuHtml reads file data from disk. It returns an error on failure.
func docMenuHtml() (*asset, error) {
	path := filepath.Join(rootDir, "doc/menu.html")
	name := "doc/menu.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// docProtoHtml reads file data from disk. It returns an error on failure.
func docProtoHtml() (*asset, error) {
	path := filepath.Join(rootDir, "doc/proto.html")
	name := "doc/proto.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// docServiceHtml reads file data from disk. It returns an error on failure.
func docServiceHtml() (*asset, error) {
	path := filepath.Join(rootDir, "doc/service.html")
	name := "doc/service.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// enableHtml reads file data from disk. It returns an error on failure.
func enableHtml() (*asset, error) {
	path := filepath.Join(rootDir, "enable.html")
	name := "enable.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// errorHtml reads file data from disk. It returns an error on failure.
func errorHtml() (*asset, error) {
	path := filepath.Join(rootDir, "error.html")
	name := "error.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// layoutHtml reads file data from disk. It returns an error on failure.
func layoutHtml() (*asset, error) {
	path := filepath.Join(rootDir, "layout.html")
	name := "layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// librariesHtml reads file data from disk. It returns an error on failure.
func librariesHtml() (*asset, error) {
	path := filepath.Join(rootDir, "libraries.html")
	name := "libraries.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// rootHtml reads file data from disk. It returns an error on failure.
func rootHtml() (*asset, error) {
	path := filepath.Join(rootDir, "root.html")
	name := "root.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.html":         apiHtml,
	"community.html":   communityHtml,
	"doc/common.html":  docCommonHtml,
	"doc/filemap.xml":  docFilemapXml,
	"doc/index.html":   docIndexHtml,
	"doc/menu.html":    docMenuHtml,
	"doc/proto.html":   docProtoHtml,
	"doc/service.html": docServiceHtml,
	"enable.html":      enableHtml,
	"error.html":       errorHtml,
	"layout.html":      layoutHtml,
	"libraries.html":   librariesHtml,
	"root.html":        rootHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.html":       &bintree{apiHtml, map[string]*bintree{}},
	"community.html": &bintree{communityHtml, map[string]*bintree{}},
	"doc": &bintree{nil, map[string]*bintree{
		"common.html":  &bintree{docCommonHtml, map[string]*bintree{}},
		"filemap.xml":  &bintree{docFilemapXml, map[string]*bintree{}},
		"index.html":   &bintree{docIndexHtml, map[string]*bintree{}},
		"menu.html":    &bintree{docMenuHtml, map[string]*bintree{}},
		"proto.html":   &bintree{docProtoHtml, map[string]*bintree{}},
		"service.html": &bintree{docServiceHtml, map[string]*bintree{}},
	}},
	"enable.html":    &bintree{enableHtml, map[string]*bintree{}},
	"error.html":     &bintree{errorHtml, map[string]*bintree{}},
	"layout.html":    &bintree{layoutHtml, map[string]*bintree{}},
	"libraries.html": &bintree{librariesHtml, map[string]*bintree{}},
	"root.html":      &bintree{rootHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
