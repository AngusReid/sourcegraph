// Code generated by go-bindata.
// sources:
// assets/font-mfizz-1.2/LICENSE.txt
// assets/font-mfizz-1.2/README.md
// assets/font-mfizz-1.2/RELEASE-NOTES.md
// assets/font-mfizz-1.2/font-mfizz.css
// assets/font-mfizz-1.2/font-mfizz.eot
// assets/font-mfizz-1.2/font-mfizz.svg
// assets/font-mfizz-1.2/font-mfizz.ttf
// assets/font-mfizz-1.2/font-mfizz.woff
// assets/font-mfizz-1.2/icons.json
// assets/font-mfizz-1.2/preview.html
// assets/gotham-black/gotham-black.css
// assets/gotham-black/gotham-black.eot
// assets/gotham-black/gotham-black.otf
// assets/gotham-black/gotham-black.svg
// assets/gotham-black/gotham-black.ttf
// assets/gotham-black/gotham-black.woff
// assets/img/favicon.png
// assets/img/gopher-hover.png
// assets/img/gopher.png
// assets/proxima-nova/proxima-nova.css
// assets/proxima-nova/proxima-nova.eot
// assets/proxima-nova/proxima-nova.otf
// assets/proxima-nova/proxima-nova.svg
// assets/proxima-nova/proxima-nova.ttf
// assets/proxima-nova/proxima-nova.woff
// assets/sourcegraph.dump
// DO NOT EDIT!

// +build dev

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// fontMfizz12LicenseTxt reads file data from disk. It returns an error on failure.
func fontMfizz12LicenseTxt() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/LICENSE.txt")
	name := "font-mfizz-1.2/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12ReadmeMd reads file data from disk. It returns an error on failure.
func fontMfizz12ReadmeMd() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/README.md")
	name := "font-mfizz-1.2/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12ReleaseNotesMd reads file data from disk. It returns an error on failure.
func fontMfizz12ReleaseNotesMd() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/RELEASE-NOTES.md")
	name := "font-mfizz-1.2/RELEASE-NOTES.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12FontMfizzCss reads file data from disk. It returns an error on failure.
func fontMfizz12FontMfizzCss() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/font-mfizz.css")
	name := "font-mfizz-1.2/font-mfizz.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12FontMfizzEot reads file data from disk. It returns an error on failure.
func fontMfizz12FontMfizzEot() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/font-mfizz.eot")
	name := "font-mfizz-1.2/font-mfizz.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12FontMfizzSvg reads file data from disk. It returns an error on failure.
func fontMfizz12FontMfizzSvg() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/font-mfizz.svg")
	name := "font-mfizz-1.2/font-mfizz.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12FontMfizzTtf reads file data from disk. It returns an error on failure.
func fontMfizz12FontMfizzTtf() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/font-mfizz.ttf")
	name := "font-mfizz-1.2/font-mfizz.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12FontMfizzWoff reads file data from disk. It returns an error on failure.
func fontMfizz12FontMfizzWoff() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/font-mfizz.woff")
	name := "font-mfizz-1.2/font-mfizz.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12IconsJson reads file data from disk. It returns an error on failure.
func fontMfizz12IconsJson() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/icons.json")
	name := "font-mfizz-1.2/icons.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontMfizz12PreviewHtml reads file data from disk. It returns an error on failure.
func fontMfizz12PreviewHtml() (*asset, error) {
	path := filepath.Join(rootDir, "font-mfizz-1.2/preview.html")
	name := "font-mfizz-1.2/preview.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gothamBlackGothamBlackCss reads file data from disk. It returns an error on failure.
func gothamBlackGothamBlackCss() (*asset, error) {
	path := filepath.Join(rootDir, "gotham-black/gotham-black.css")
	name := "gotham-black/gotham-black.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gothamBlackGothamBlackEot reads file data from disk. It returns an error on failure.
func gothamBlackGothamBlackEot() (*asset, error) {
	path := filepath.Join(rootDir, "gotham-black/gotham-black.eot")
	name := "gotham-black/gotham-black.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gothamBlackGothamBlackOtf reads file data from disk. It returns an error on failure.
func gothamBlackGothamBlackOtf() (*asset, error) {
	path := filepath.Join(rootDir, "gotham-black/gotham-black.otf")
	name := "gotham-black/gotham-black.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gothamBlackGothamBlackSvg reads file data from disk. It returns an error on failure.
func gothamBlackGothamBlackSvg() (*asset, error) {
	path := filepath.Join(rootDir, "gotham-black/gotham-black.svg")
	name := "gotham-black/gotham-black.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gothamBlackGothamBlackTtf reads file data from disk. It returns an error on failure.
func gothamBlackGothamBlackTtf() (*asset, error) {
	path := filepath.Join(rootDir, "gotham-black/gotham-black.ttf")
	name := "gotham-black/gotham-black.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// gothamBlackGothamBlackWoff reads file data from disk. It returns an error on failure.
func gothamBlackGothamBlackWoff() (*asset, error) {
	path := filepath.Join(rootDir, "gotham-black/gotham-black.woff")
	name := "gotham-black/gotham-black.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFaviconPng reads file data from disk. It returns an error on failure.
func imgFaviconPng() (*asset, error) {
	path := filepath.Join(rootDir, "img/favicon.png")
	name := "img/favicon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGopherHoverPng reads file data from disk. It returns an error on failure.
func imgGopherHoverPng() (*asset, error) {
	path := filepath.Join(rootDir, "img/gopher-hover.png")
	name := "img/gopher-hover.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGopherPng reads file data from disk. It returns an error on failure.
func imgGopherPng() (*asset, error) {
	path := filepath.Join(rootDir, "img/gopher.png")
	name := "img/gopher.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// proximaNovaProximaNovaCss reads file data from disk. It returns an error on failure.
func proximaNovaProximaNovaCss() (*asset, error) {
	path := filepath.Join(rootDir, "proxima-nova/proxima-nova.css")
	name := "proxima-nova/proxima-nova.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// proximaNovaProximaNovaEot reads file data from disk. It returns an error on failure.
func proximaNovaProximaNovaEot() (*asset, error) {
	path := filepath.Join(rootDir, "proxima-nova/proxima-nova.eot")
	name := "proxima-nova/proxima-nova.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// proximaNovaProximaNovaOtf reads file data from disk. It returns an error on failure.
func proximaNovaProximaNovaOtf() (*asset, error) {
	path := filepath.Join(rootDir, "proxima-nova/proxima-nova.otf")
	name := "proxima-nova/proxima-nova.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// proximaNovaProximaNovaSvg reads file data from disk. It returns an error on failure.
func proximaNovaProximaNovaSvg() (*asset, error) {
	path := filepath.Join(rootDir, "proxima-nova/proxima-nova.svg")
	name := "proxima-nova/proxima-nova.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// proximaNovaProximaNovaTtf reads file data from disk. It returns an error on failure.
func proximaNovaProximaNovaTtf() (*asset, error) {
	path := filepath.Join(rootDir, "proxima-nova/proxima-nova.ttf")
	name := "proxima-nova/proxima-nova.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// proximaNovaProximaNovaWoff reads file data from disk. It returns an error on failure.
func proximaNovaProximaNovaWoff() (*asset, error) {
	path := filepath.Join(rootDir, "proxima-nova/proxima-nova.woff")
	name := "proxima-nova/proxima-nova.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// sourcegraphDump reads file data from disk. It returns an error on failure.
func sourcegraphDump() (*asset, error) {
	path := filepath.Join(rootDir, "sourcegraph.dump")
	name := "sourcegraph.dump"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"font-mfizz-1.2/LICENSE.txt":      fontMfizz12LicenseTxt,
	"font-mfizz-1.2/README.md":        fontMfizz12ReadmeMd,
	"font-mfizz-1.2/RELEASE-NOTES.md": fontMfizz12ReleaseNotesMd,
	"font-mfizz-1.2/font-mfizz.css":   fontMfizz12FontMfizzCss,
	"font-mfizz-1.2/font-mfizz.eot":   fontMfizz12FontMfizzEot,
	"font-mfizz-1.2/font-mfizz.svg":   fontMfizz12FontMfizzSvg,
	"font-mfizz-1.2/font-mfizz.ttf":   fontMfizz12FontMfizzTtf,
	"font-mfizz-1.2/font-mfizz.woff":  fontMfizz12FontMfizzWoff,
	"font-mfizz-1.2/icons.json":       fontMfizz12IconsJson,
	"font-mfizz-1.2/preview.html":     fontMfizz12PreviewHtml,
	"gotham-black/gotham-black.css":   gothamBlackGothamBlackCss,
	"gotham-black/gotham-black.eot":   gothamBlackGothamBlackEot,
	"gotham-black/gotham-black.otf":   gothamBlackGothamBlackOtf,
	"gotham-black/gotham-black.svg":   gothamBlackGothamBlackSvg,
	"gotham-black/gotham-black.ttf":   gothamBlackGothamBlackTtf,
	"gotham-black/gotham-black.woff":  gothamBlackGothamBlackWoff,
	"img/favicon.png":                 imgFaviconPng,
	"img/gopher-hover.png":            imgGopherHoverPng,
	"img/gopher.png":                  imgGopherPng,
	"proxima-nova/proxima-nova.css":   proximaNovaProximaNovaCss,
	"proxima-nova/proxima-nova.eot":   proximaNovaProximaNovaEot,
	"proxima-nova/proxima-nova.otf":   proximaNovaProximaNovaOtf,
	"proxima-nova/proxima-nova.svg":   proximaNovaProximaNovaSvg,
	"proxima-nova/proxima-nova.ttf":   proximaNovaProximaNovaTtf,
	"proxima-nova/proxima-nova.woff":  proximaNovaProximaNovaWoff,
	"sourcegraph.dump":                sourcegraphDump,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"font-mfizz-1.2": &bintree{nil, map[string]*bintree{
		"LICENSE.txt":      &bintree{fontMfizz12LicenseTxt, map[string]*bintree{}},
		"README.md":        &bintree{fontMfizz12ReadmeMd, map[string]*bintree{}},
		"RELEASE-NOTES.md": &bintree{fontMfizz12ReleaseNotesMd, map[string]*bintree{}},
		"font-mfizz.css":   &bintree{fontMfizz12FontMfizzCss, map[string]*bintree{}},
		"font-mfizz.eot":   &bintree{fontMfizz12FontMfizzEot, map[string]*bintree{}},
		"font-mfizz.svg":   &bintree{fontMfizz12FontMfizzSvg, map[string]*bintree{}},
		"font-mfizz.ttf":   &bintree{fontMfizz12FontMfizzTtf, map[string]*bintree{}},
		"font-mfizz.woff":  &bintree{fontMfizz12FontMfizzWoff, map[string]*bintree{}},
		"icons.json":       &bintree{fontMfizz12IconsJson, map[string]*bintree{}},
		"preview.html":     &bintree{fontMfizz12PreviewHtml, map[string]*bintree{}},
	}},
	"gotham-black": &bintree{nil, map[string]*bintree{
		"gotham-black.css":  &bintree{gothamBlackGothamBlackCss, map[string]*bintree{}},
		"gotham-black.eot":  &bintree{gothamBlackGothamBlackEot, map[string]*bintree{}},
		"gotham-black.otf":  &bintree{gothamBlackGothamBlackOtf, map[string]*bintree{}},
		"gotham-black.svg":  &bintree{gothamBlackGothamBlackSvg, map[string]*bintree{}},
		"gotham-black.ttf":  &bintree{gothamBlackGothamBlackTtf, map[string]*bintree{}},
		"gotham-black.woff": &bintree{gothamBlackGothamBlackWoff, map[string]*bintree{}},
	}},
	"img": &bintree{nil, map[string]*bintree{
		"favicon.png":      &bintree{imgFaviconPng, map[string]*bintree{}},
		"gopher-hover.png": &bintree{imgGopherHoverPng, map[string]*bintree{}},
		"gopher.png":       &bintree{imgGopherPng, map[string]*bintree{}},
	}},
	"proxima-nova": &bintree{nil, map[string]*bintree{
		"proxima-nova.css":  &bintree{proximaNovaProximaNovaCss, map[string]*bintree{}},
		"proxima-nova.eot":  &bintree{proximaNovaProximaNovaEot, map[string]*bintree{}},
		"proxima-nova.otf":  &bintree{proximaNovaProximaNovaOtf, map[string]*bintree{}},
		"proxima-nova.svg":  &bintree{proximaNovaProximaNovaSvg, map[string]*bintree{}},
		"proxima-nova.ttf":  &bintree{proximaNovaProximaNovaTtf, map[string]*bintree{}},
		"proxima-nova.woff": &bintree{proximaNovaProximaNovaWoff, map[string]*bintree{}},
	}},
	"sourcegraph.dump": &bintree{sourcegraphDump, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
