// Code generated by protoc-gen-gogo.
// source: git_transport.proto
// DO NOT EDIT!

/*
	Package gitpb is a generated protocol buffer package.

	It is generated from these files:
		git_transport.proto

	It has these top-level messages:
		InfoRefsOp
		ReceivePackOp
		UploadPackOp
		Packet
*/
package gitpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto"
import sourcegraph "src.sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InfoRefsOp struct {
	Repo    sourcegraph.RepoSpec `protobuf:"bytes,1,opt,name=repo" json:"repo"`
	Service string               `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *InfoRefsOp) Reset()         { *m = InfoRefsOp{} }
func (m *InfoRefsOp) String() string { return proto.CompactTextString(m) }
func (*InfoRefsOp) ProtoMessage()    {}

type ReceivePackOp struct {
	Repo            sourcegraph.RepoSpec `protobuf:"bytes,1,opt,name=repo" json:"repo"`
	ContentEncoding string               `protobuf:"bytes,2,opt,name=content_encoding,proto3" json:"content_encoding,omitempty"`
	Data            []byte               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReceivePackOp) Reset()         { *m = ReceivePackOp{} }
func (m *ReceivePackOp) String() string { return proto.CompactTextString(m) }
func (*ReceivePackOp) ProtoMessage()    {}

type UploadPackOp struct {
	Repo            sourcegraph.RepoSpec `protobuf:"bytes,1,opt,name=repo" json:"repo"`
	ContentEncoding string               `protobuf:"bytes,2,opt,name=content_encoding,proto3" json:"content_encoding,omitempty"`
	Data            []byte               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadPackOp) Reset()         { *m = UploadPackOp{} }
func (m *UploadPackOp) String() string { return proto.CompactTextString(m) }
func (*UploadPackOp) ProtoMessage()    {}

type Packet struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GitTransport service

type GitTransportClient interface {
	InfoRefs(ctx context.Context, in *InfoRefsOp, opts ...grpc.CallOption) (*Packet, error)
	ReceivePack(ctx context.Context, in *ReceivePackOp, opts ...grpc.CallOption) (*Packet, error)
	UploadPack(ctx context.Context, in *UploadPackOp, opts ...grpc.CallOption) (*Packet, error)
}

type gitTransportClient struct {
	cc *grpc.ClientConn
}

func NewGitTransportClient(cc *grpc.ClientConn) GitTransportClient {
	return &gitTransportClient{cc}
}

func (c *gitTransportClient) InfoRefs(ctx context.Context, in *InfoRefsOp, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := grpc.Invoke(ctx, "/gitpb.GitTransport/InfoRefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitTransportClient) ReceivePack(ctx context.Context, in *ReceivePackOp, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := grpc.Invoke(ctx, "/gitpb.GitTransport/ReceivePack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitTransportClient) UploadPack(ctx context.Context, in *UploadPackOp, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := grpc.Invoke(ctx, "/gitpb.GitTransport/UploadPack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GitTransport service

type GitTransportServer interface {
	InfoRefs(context.Context, *InfoRefsOp) (*Packet, error)
	ReceivePack(context.Context, *ReceivePackOp) (*Packet, error)
	UploadPack(context.Context, *UploadPackOp) (*Packet, error)
}

func RegisterGitTransportServer(s *grpc.Server, srv GitTransportServer) {
	s.RegisterService(&_GitTransport_serviceDesc, srv)
}

func _GitTransport_InfoRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InfoRefsOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GitTransportServer).InfoRefs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GitTransport_ReceivePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReceivePackOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GitTransportServer).ReceivePack(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GitTransport_UploadPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UploadPackOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GitTransportServer).UploadPack(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GitTransport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitpb.GitTransport",
	HandlerType: (*GitTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoRefs",
			Handler:    _GitTransport_InfoRefs_Handler,
		},
		{
			MethodName: "ReceivePack",
			Handler:    _GitTransport_ReceivePack_Handler,
		},
		{
			MethodName: "UploadPack",
			Handler:    _GitTransport_UploadPack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
