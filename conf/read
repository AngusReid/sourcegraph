#!/bin/bash

if [[ "$1" == "-h" ]]; then
  echo Usage: eval '`'"$0"' [domain]`'
  echo
  echo This script merges configuration from conf/public and conf/private
  echo for the given domain name \(or __default if no domain is given or
  echo if no config file for the domain exists\).
  echo
  echo You must '`eval`' this script \(not just run it\) so that the env
  echo vars it sets will propagate to your shell.
  echo
  echo In development, run '`eval '"$0"'`' to populate your shell with
  echo the standard development environment variables.
  echo
  echo The deployment scripts run this script with the '--json' option to
  echo obtain JSON-encoded configuration for the target domain.
  echo
  exit 0
fi

# unset all other environment variables
[ "$HOME" != "" ] && exec -c $0 $1 $2

MYDIR0="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

DOMAIN="${1-__default}"

echo Reading config for domain '"'${DOMAIN}'"' 1>&2

if [[ -f "$MYDIR0"/private/"$DOMAIN" ]]; then
    source "$MYDIR0"/private/"$DOMAIN"
else
    echo Reading from default private config file 1>&2
    source "$MYDIR0"/private/__default
fi

if [[ -f "$MYDIR0"/public/"$DOMAIN" ]]; then
    source "$MYDIR0"/public/"$DOMAIN"
else
    echo Reading from default public config file 1>&2
    source "$MYDIR0"/public/__default
fi

export CONF_PUBLIC_VERSION=$(cd "$MYDIR0"/public && git log --pretty=format:%h -n1 --follow .)
export CONF_PRIVATE_VERSION=$(cd "$MYDIR0"/private && git log --pretty=format:%h -n1 --follow .)

unset PWD
unset _
unset SHLVL

IFS=$'\n' # make newlines the only separator
if [[ "$2" == "--json" ]]; then
    echo \{
    for line in `env | sort | egrep -v '^_='`; do
        echo $line | sed 's/^\([^=]*\)=\(.*\)$/"\1": "\2",/g'
    done
    echo '"x":""' # hack so there's no trailing comma after last property
    echo \}
else
    for line in `env | sort | egrep -v '^_='`; do
        echo export "'$line'";
    done    
fi
