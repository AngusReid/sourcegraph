// +build ignore

package main

import (
	"text/template"

	"src.sourcegraph.com/sourcegraph/gen"
)

func main() {
	svcs := []string{
		"../../../Godeps/_workspace/src/src.sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph/sourcegraph.pb.go",
		"../../../Godeps/_workspace/src/sourcegraph.com/sourcegraph/srclib/store/pb/srcstore.pb.go",
		"../../../gitserver/gitpb/git_transport.pb.go",
	}
	gen.Generate("remote.go", tmpl, svcs, isRemote)
}

func isRemote(x *gen.Service) bool {
	return x.Name != "MultiRepoImporter" && x.Name != "GitTransport"
}

var tmpl = template.Must(template.New("").Delims("<<<", ">>>").Parse(`// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_remote.go
//
// Called via:
//
//   go generate
//

package remote

import (
	"golang.org/x/net/context"
	"src.sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"
	"sourcegraph.com/sourcegraph/go-vcs/vcs"
	"src.sourcegraph.com/sourcegraph/svc"
	"sourcegraph.com/sourcegraph/srclib/unit"
	"sourcegraph.com/sqs/pbtypes"
)

// Services is a full set of remote services (implemented by calling a client to invoke each method on a remote server).
var Services = svc.Services{
	<<<range .>>><<<.Name>>>: remote<<<.Name>>>{},
	<<<end>>>
}

<<<range .>>>
	type remote<<<.Name>>> struct{ <<<.TypeName>>> }

  <<<$service := .>>>
	<<<range .Methods>>>
		func (s remote<<<$service.Name>>>) <<<.Name>>>(ctx context.Context, v1 <<<.ParamType>>>) (<<<.ResultType>>>, error) {
			return sourcegraph.NewClientFromContext(ctx).<<<$service.Name>>>.<<<.Name>>>(ctx, v1)
		}
	<<<end>>>
<<<end>>>
`))
