// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_context.go
//
// Called via:
//
//   go generate
//

package svc

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"
	"sourcegraph.com/sourcegraph/srclib/store/pb"
	"src.sourcegraph.com/sourcegraph/gitserver/gitpb"
)

type contextKey int

const (
	_GitTransportKey        contextKey = iota
	_MultiRepoImporterKey   contextKey = iota
	_AccountsKey            contextKey = iota
	_AuthKey                contextKey = iota
	_BuildsKey              contextKey = iota
	_ChangesetsKey          contextKey = iota
	_DefsKey                contextKey = iota
	_DeltasKey              contextKey = iota
	_DiscussionsKey         contextKey = iota
	_GraphUplinkKey         contextKey = iota
	_MarkdownKey            contextKey = iota
	_MetaKey                contextKey = iota
	_MirrorReposKey         contextKey = iota
	_MirroredRepoSSHKeysKey contextKey = iota
	_OrgsKey                contextKey = iota
	_PeopleKey              contextKey = iota
	_RegisteredClientsKey   contextKey = iota
	_RepoBadgesKey          contextKey = iota
	_RepoStatusesKey        contextKey = iota
	_RepoTreeKey            contextKey = iota
	_ReposKey               contextKey = iota
	_SearchKey              contextKey = iota
	_StorageKey             contextKey = iota
	_UnitsKey               contextKey = iota
	_UserKeysKey            contextKey = iota
	_UsersKey               contextKey = iota
)

// Services contains fields for all existing services.
type Services struct {
	GitTransport        gitpb.GitTransportServer
	MultiRepoImporter   pb.MultiRepoImporterServer
	Accounts            sourcegraph.AccountsServer
	Auth                sourcegraph.AuthServer
	Builds              sourcegraph.BuildsServer
	Changesets          sourcegraph.ChangesetsServer
	Defs                sourcegraph.DefsServer
	Deltas              sourcegraph.DeltasServer
	Discussions         sourcegraph.DiscussionsServer
	GraphUplink         sourcegraph.GraphUplinkServer
	Markdown            sourcegraph.MarkdownServer
	Meta                sourcegraph.MetaServer
	MirrorRepos         sourcegraph.MirrorReposServer
	MirroredRepoSSHKeys sourcegraph.MirroredRepoSSHKeysServer
	Orgs                sourcegraph.OrgsServer
	People              sourcegraph.PeopleServer
	RegisteredClients   sourcegraph.RegisteredClientsServer
	RepoBadges          sourcegraph.RepoBadgesServer
	RepoStatuses        sourcegraph.RepoStatusesServer
	RepoTree            sourcegraph.RepoTreeServer
	Repos               sourcegraph.ReposServer
	Search              sourcegraph.SearchServer
	Storage             sourcegraph.StorageServer
	Units               sourcegraph.UnitsServer
	UserKeys            sourcegraph.UserKeysServer
	Users               sourcegraph.UsersServer
}

// RegisterAll calls all of the the RegisterXxxServer funcs.
func RegisterAll(s *grpc.Server, svcs Services) {

	if svcs.GitTransport != nil {
		gitpb.RegisterGitTransportServer(s, svcs.GitTransport)
	}

	if svcs.MultiRepoImporter != nil {
		pb.RegisterMultiRepoImporterServer(s, svcs.MultiRepoImporter)
	}

	if svcs.Accounts != nil {
		sourcegraph.RegisterAccountsServer(s, svcs.Accounts)
	}

	if svcs.Auth != nil {
		sourcegraph.RegisterAuthServer(s, svcs.Auth)
	}

	if svcs.Builds != nil {
		sourcegraph.RegisterBuildsServer(s, svcs.Builds)
	}

	if svcs.Changesets != nil {
		sourcegraph.RegisterChangesetsServer(s, svcs.Changesets)
	}

	if svcs.Defs != nil {
		sourcegraph.RegisterDefsServer(s, svcs.Defs)
	}

	if svcs.Deltas != nil {
		sourcegraph.RegisterDeltasServer(s, svcs.Deltas)
	}

	if svcs.Discussions != nil {
		sourcegraph.RegisterDiscussionsServer(s, svcs.Discussions)
	}

	if svcs.GraphUplink != nil {
		sourcegraph.RegisterGraphUplinkServer(s, svcs.GraphUplink)
	}

	if svcs.Markdown != nil {
		sourcegraph.RegisterMarkdownServer(s, svcs.Markdown)
	}

	if svcs.Meta != nil {
		sourcegraph.RegisterMetaServer(s, svcs.Meta)
	}

	if svcs.MirrorRepos != nil {
		sourcegraph.RegisterMirrorReposServer(s, svcs.MirrorRepos)
	}

	if svcs.MirroredRepoSSHKeys != nil {
		sourcegraph.RegisterMirroredRepoSSHKeysServer(s, svcs.MirroredRepoSSHKeys)
	}

	if svcs.Orgs != nil {
		sourcegraph.RegisterOrgsServer(s, svcs.Orgs)
	}

	if svcs.People != nil {
		sourcegraph.RegisterPeopleServer(s, svcs.People)
	}

	if svcs.RegisteredClients != nil {
		sourcegraph.RegisterRegisteredClientsServer(s, svcs.RegisteredClients)
	}

	if svcs.RepoBadges != nil {
		sourcegraph.RegisterRepoBadgesServer(s, svcs.RepoBadges)
	}

	if svcs.RepoStatuses != nil {
		sourcegraph.RegisterRepoStatusesServer(s, svcs.RepoStatuses)
	}

	if svcs.RepoTree != nil {
		sourcegraph.RegisterRepoTreeServer(s, svcs.RepoTree)
	}

	if svcs.Repos != nil {
		sourcegraph.RegisterReposServer(s, svcs.Repos)
	}

	if svcs.Search != nil {
		sourcegraph.RegisterSearchServer(s, svcs.Search)
	}

	if svcs.Storage != nil {
		sourcegraph.RegisterStorageServer(s, svcs.Storage)
	}

	if svcs.Units != nil {
		sourcegraph.RegisterUnitsServer(s, svcs.Units)
	}

	if svcs.UserKeys != nil {
		sourcegraph.RegisterUserKeysServer(s, svcs.UserKeys)
	}

	if svcs.Users != nil {
		sourcegraph.RegisterUsersServer(s, svcs.Users)
	}

}

// WithServices returns a copy of parent with the given services. If a service's field value is nil, its previous value is inherited from parent in the new context.
func WithServices(ctx context.Context, s Services) context.Context {

	if s.GitTransport != nil {
		ctx = WithGitTransport(ctx, s.GitTransport)
	}

	if s.MultiRepoImporter != nil {
		ctx = WithMultiRepoImporter(ctx, s.MultiRepoImporter)
	}

	if s.Accounts != nil {
		ctx = WithAccounts(ctx, s.Accounts)
	}

	if s.Auth != nil {
		ctx = WithAuth(ctx, s.Auth)
	}

	if s.Builds != nil {
		ctx = WithBuilds(ctx, s.Builds)
	}

	if s.Changesets != nil {
		ctx = WithChangesets(ctx, s.Changesets)
	}

	if s.Defs != nil {
		ctx = WithDefs(ctx, s.Defs)
	}

	if s.Deltas != nil {
		ctx = WithDeltas(ctx, s.Deltas)
	}

	if s.Discussions != nil {
		ctx = WithDiscussions(ctx, s.Discussions)
	}

	if s.GraphUplink != nil {
		ctx = WithGraphUplink(ctx, s.GraphUplink)
	}

	if s.Markdown != nil {
		ctx = WithMarkdown(ctx, s.Markdown)
	}

	if s.Meta != nil {
		ctx = WithMeta(ctx, s.Meta)
	}

	if s.MirrorRepos != nil {
		ctx = WithMirrorRepos(ctx, s.MirrorRepos)
	}

	if s.MirroredRepoSSHKeys != nil {
		ctx = WithMirroredRepoSSHKeys(ctx, s.MirroredRepoSSHKeys)
	}

	if s.Orgs != nil {
		ctx = WithOrgs(ctx, s.Orgs)
	}

	if s.People != nil {
		ctx = WithPeople(ctx, s.People)
	}

	if s.RegisteredClients != nil {
		ctx = WithRegisteredClients(ctx, s.RegisteredClients)
	}

	if s.RepoBadges != nil {
		ctx = WithRepoBadges(ctx, s.RepoBadges)
	}

	if s.RepoStatuses != nil {
		ctx = WithRepoStatuses(ctx, s.RepoStatuses)
	}

	if s.RepoTree != nil {
		ctx = WithRepoTree(ctx, s.RepoTree)
	}

	if s.Repos != nil {
		ctx = WithRepos(ctx, s.Repos)
	}

	if s.Search != nil {
		ctx = WithSearch(ctx, s.Search)
	}

	if s.Storage != nil {
		ctx = WithStorage(ctx, s.Storage)
	}

	if s.Units != nil {
		ctx = WithUnits(ctx, s.Units)
	}

	if s.UserKeys != nil {
		ctx = WithUserKeys(ctx, s.UserKeys)
	}

	if s.Users != nil {
		ctx = WithUsers(ctx, s.Users)
	}

	return ctx
}

// WithGitTransport returns a copy of parent that uses the given GitTransport service.
func WithGitTransport(ctx context.Context, s gitpb.GitTransportServer) context.Context {
	return context.WithValue(ctx, _GitTransportKey, s)
}

// GitTransport gets the context's GitTransport service. If the service is not present, it panics.
func GitTransport(ctx context.Context) gitpb.GitTransportServer {
	s, ok := ctx.Value(_GitTransportKey).(gitpb.GitTransportServer)
	if !ok || s == nil {
		panic("no GitTransport set in context")
	}
	return s
}

// GitTransportOrNil returns the context's GitTransport service if present, or else nil.
func GitTransportOrNil(ctx context.Context) gitpb.GitTransportServer {
	s, ok := ctx.Value(_GitTransportKey).(gitpb.GitTransportServer)
	if ok {
		return s
	}
	return nil
}

// WithMultiRepoImporter returns a copy of parent that uses the given MultiRepoImporter service.
func WithMultiRepoImporter(ctx context.Context, s pb.MultiRepoImporterServer) context.Context {
	return context.WithValue(ctx, _MultiRepoImporterKey, s)
}

// MultiRepoImporter gets the context's MultiRepoImporter service. If the service is not present, it panics.
func MultiRepoImporter(ctx context.Context) pb.MultiRepoImporterServer {
	s, ok := ctx.Value(_MultiRepoImporterKey).(pb.MultiRepoImporterServer)
	if !ok || s == nil {
		panic("no MultiRepoImporter set in context")
	}
	return s
}

// MultiRepoImporterOrNil returns the context's MultiRepoImporter service if present, or else nil.
func MultiRepoImporterOrNil(ctx context.Context) pb.MultiRepoImporterServer {
	s, ok := ctx.Value(_MultiRepoImporterKey).(pb.MultiRepoImporterServer)
	if ok {
		return s
	}
	return nil
}

// WithAccounts returns a copy of parent that uses the given Accounts service.
func WithAccounts(ctx context.Context, s sourcegraph.AccountsServer) context.Context {
	return context.WithValue(ctx, _AccountsKey, s)
}

// Accounts gets the context's Accounts service. If the service is not present, it panics.
func Accounts(ctx context.Context) sourcegraph.AccountsServer {
	s, ok := ctx.Value(_AccountsKey).(sourcegraph.AccountsServer)
	if !ok || s == nil {
		panic("no Accounts set in context")
	}
	return s
}

// AccountsOrNil returns the context's Accounts service if present, or else nil.
func AccountsOrNil(ctx context.Context) sourcegraph.AccountsServer {
	s, ok := ctx.Value(_AccountsKey).(sourcegraph.AccountsServer)
	if ok {
		return s
	}
	return nil
}

// WithAuth returns a copy of parent that uses the given Auth service.
func WithAuth(ctx context.Context, s sourcegraph.AuthServer) context.Context {
	return context.WithValue(ctx, _AuthKey, s)
}

// Auth gets the context's Auth service. If the service is not present, it panics.
func Auth(ctx context.Context) sourcegraph.AuthServer {
	s, ok := ctx.Value(_AuthKey).(sourcegraph.AuthServer)
	if !ok || s == nil {
		panic("no Auth set in context")
	}
	return s
}

// AuthOrNil returns the context's Auth service if present, or else nil.
func AuthOrNil(ctx context.Context) sourcegraph.AuthServer {
	s, ok := ctx.Value(_AuthKey).(sourcegraph.AuthServer)
	if ok {
		return s
	}
	return nil
}

// WithBuilds returns a copy of parent that uses the given Builds service.
func WithBuilds(ctx context.Context, s sourcegraph.BuildsServer) context.Context {
	return context.WithValue(ctx, _BuildsKey, s)
}

// Builds gets the context's Builds service. If the service is not present, it panics.
func Builds(ctx context.Context) sourcegraph.BuildsServer {
	s, ok := ctx.Value(_BuildsKey).(sourcegraph.BuildsServer)
	if !ok || s == nil {
		panic("no Builds set in context")
	}
	return s
}

// BuildsOrNil returns the context's Builds service if present, or else nil.
func BuildsOrNil(ctx context.Context) sourcegraph.BuildsServer {
	s, ok := ctx.Value(_BuildsKey).(sourcegraph.BuildsServer)
	if ok {
		return s
	}
	return nil
}

// WithChangesets returns a copy of parent that uses the given Changesets service.
func WithChangesets(ctx context.Context, s sourcegraph.ChangesetsServer) context.Context {
	return context.WithValue(ctx, _ChangesetsKey, s)
}

// Changesets gets the context's Changesets service. If the service is not present, it panics.
func Changesets(ctx context.Context) sourcegraph.ChangesetsServer {
	s, ok := ctx.Value(_ChangesetsKey).(sourcegraph.ChangesetsServer)
	if !ok || s == nil {
		panic("no Changesets set in context")
	}
	return s
}

// ChangesetsOrNil returns the context's Changesets service if present, or else nil.
func ChangesetsOrNil(ctx context.Context) sourcegraph.ChangesetsServer {
	s, ok := ctx.Value(_ChangesetsKey).(sourcegraph.ChangesetsServer)
	if ok {
		return s
	}
	return nil
}

// WithDefs returns a copy of parent that uses the given Defs service.
func WithDefs(ctx context.Context, s sourcegraph.DefsServer) context.Context {
	return context.WithValue(ctx, _DefsKey, s)
}

// Defs gets the context's Defs service. If the service is not present, it panics.
func Defs(ctx context.Context) sourcegraph.DefsServer {
	s, ok := ctx.Value(_DefsKey).(sourcegraph.DefsServer)
	if !ok || s == nil {
		panic("no Defs set in context")
	}
	return s
}

// DefsOrNil returns the context's Defs service if present, or else nil.
func DefsOrNil(ctx context.Context) sourcegraph.DefsServer {
	s, ok := ctx.Value(_DefsKey).(sourcegraph.DefsServer)
	if ok {
		return s
	}
	return nil
}

// WithDeltas returns a copy of parent that uses the given Deltas service.
func WithDeltas(ctx context.Context, s sourcegraph.DeltasServer) context.Context {
	return context.WithValue(ctx, _DeltasKey, s)
}

// Deltas gets the context's Deltas service. If the service is not present, it panics.
func Deltas(ctx context.Context) sourcegraph.DeltasServer {
	s, ok := ctx.Value(_DeltasKey).(sourcegraph.DeltasServer)
	if !ok || s == nil {
		panic("no Deltas set in context")
	}
	return s
}

// DeltasOrNil returns the context's Deltas service if present, or else nil.
func DeltasOrNil(ctx context.Context) sourcegraph.DeltasServer {
	s, ok := ctx.Value(_DeltasKey).(sourcegraph.DeltasServer)
	if ok {
		return s
	}
	return nil
}

// WithDiscussions returns a copy of parent that uses the given Discussions service.
func WithDiscussions(ctx context.Context, s sourcegraph.DiscussionsServer) context.Context {
	return context.WithValue(ctx, _DiscussionsKey, s)
}

// Discussions gets the context's Discussions service. If the service is not present, it panics.
func Discussions(ctx context.Context) sourcegraph.DiscussionsServer {
	s, ok := ctx.Value(_DiscussionsKey).(sourcegraph.DiscussionsServer)
	if !ok || s == nil {
		panic("no Discussions set in context")
	}
	return s
}

// DiscussionsOrNil returns the context's Discussions service if present, or else nil.
func DiscussionsOrNil(ctx context.Context) sourcegraph.DiscussionsServer {
	s, ok := ctx.Value(_DiscussionsKey).(sourcegraph.DiscussionsServer)
	if ok {
		return s
	}
	return nil
}

// WithGraphUplink returns a copy of parent that uses the given GraphUplink service.
func WithGraphUplink(ctx context.Context, s sourcegraph.GraphUplinkServer) context.Context {
	return context.WithValue(ctx, _GraphUplinkKey, s)
}

// GraphUplink gets the context's GraphUplink service. If the service is not present, it panics.
func GraphUplink(ctx context.Context) sourcegraph.GraphUplinkServer {
	s, ok := ctx.Value(_GraphUplinkKey).(sourcegraph.GraphUplinkServer)
	if !ok || s == nil {
		panic("no GraphUplink set in context")
	}
	return s
}

// GraphUplinkOrNil returns the context's GraphUplink service if present, or else nil.
func GraphUplinkOrNil(ctx context.Context) sourcegraph.GraphUplinkServer {
	s, ok := ctx.Value(_GraphUplinkKey).(sourcegraph.GraphUplinkServer)
	if ok {
		return s
	}
	return nil
}

// WithMarkdown returns a copy of parent that uses the given Markdown service.
func WithMarkdown(ctx context.Context, s sourcegraph.MarkdownServer) context.Context {
	return context.WithValue(ctx, _MarkdownKey, s)
}

// Markdown gets the context's Markdown service. If the service is not present, it panics.
func Markdown(ctx context.Context) sourcegraph.MarkdownServer {
	s, ok := ctx.Value(_MarkdownKey).(sourcegraph.MarkdownServer)
	if !ok || s == nil {
		panic("no Markdown set in context")
	}
	return s
}

// MarkdownOrNil returns the context's Markdown service if present, or else nil.
func MarkdownOrNil(ctx context.Context) sourcegraph.MarkdownServer {
	s, ok := ctx.Value(_MarkdownKey).(sourcegraph.MarkdownServer)
	if ok {
		return s
	}
	return nil
}

// WithMeta returns a copy of parent that uses the given Meta service.
func WithMeta(ctx context.Context, s sourcegraph.MetaServer) context.Context {
	return context.WithValue(ctx, _MetaKey, s)
}

// Meta gets the context's Meta service. If the service is not present, it panics.
func Meta(ctx context.Context) sourcegraph.MetaServer {
	s, ok := ctx.Value(_MetaKey).(sourcegraph.MetaServer)
	if !ok || s == nil {
		panic("no Meta set in context")
	}
	return s
}

// MetaOrNil returns the context's Meta service if present, or else nil.
func MetaOrNil(ctx context.Context) sourcegraph.MetaServer {
	s, ok := ctx.Value(_MetaKey).(sourcegraph.MetaServer)
	if ok {
		return s
	}
	return nil
}

// WithMirrorRepos returns a copy of parent that uses the given MirrorRepos service.
func WithMirrorRepos(ctx context.Context, s sourcegraph.MirrorReposServer) context.Context {
	return context.WithValue(ctx, _MirrorReposKey, s)
}

// MirrorRepos gets the context's MirrorRepos service. If the service is not present, it panics.
func MirrorRepos(ctx context.Context) sourcegraph.MirrorReposServer {
	s, ok := ctx.Value(_MirrorReposKey).(sourcegraph.MirrorReposServer)
	if !ok || s == nil {
		panic("no MirrorRepos set in context")
	}
	return s
}

// MirrorReposOrNil returns the context's MirrorRepos service if present, or else nil.
func MirrorReposOrNil(ctx context.Context) sourcegraph.MirrorReposServer {
	s, ok := ctx.Value(_MirrorReposKey).(sourcegraph.MirrorReposServer)
	if ok {
		return s
	}
	return nil
}

// WithMirroredRepoSSHKeys returns a copy of parent that uses the given MirroredRepoSSHKeys service.
func WithMirroredRepoSSHKeys(ctx context.Context, s sourcegraph.MirroredRepoSSHKeysServer) context.Context {
	return context.WithValue(ctx, _MirroredRepoSSHKeysKey, s)
}

// MirroredRepoSSHKeys gets the context's MirroredRepoSSHKeys service. If the service is not present, it panics.
func MirroredRepoSSHKeys(ctx context.Context) sourcegraph.MirroredRepoSSHKeysServer {
	s, ok := ctx.Value(_MirroredRepoSSHKeysKey).(sourcegraph.MirroredRepoSSHKeysServer)
	if !ok || s == nil {
		panic("no MirroredRepoSSHKeys set in context")
	}
	return s
}

// MirroredRepoSSHKeysOrNil returns the context's MirroredRepoSSHKeys service if present, or else nil.
func MirroredRepoSSHKeysOrNil(ctx context.Context) sourcegraph.MirroredRepoSSHKeysServer {
	s, ok := ctx.Value(_MirroredRepoSSHKeysKey).(sourcegraph.MirroredRepoSSHKeysServer)
	if ok {
		return s
	}
	return nil
}

// WithOrgs returns a copy of parent that uses the given Orgs service.
func WithOrgs(ctx context.Context, s sourcegraph.OrgsServer) context.Context {
	return context.WithValue(ctx, _OrgsKey, s)
}

// Orgs gets the context's Orgs service. If the service is not present, it panics.
func Orgs(ctx context.Context) sourcegraph.OrgsServer {
	s, ok := ctx.Value(_OrgsKey).(sourcegraph.OrgsServer)
	if !ok || s == nil {
		panic("no Orgs set in context")
	}
	return s
}

// OrgsOrNil returns the context's Orgs service if present, or else nil.
func OrgsOrNil(ctx context.Context) sourcegraph.OrgsServer {
	s, ok := ctx.Value(_OrgsKey).(sourcegraph.OrgsServer)
	if ok {
		return s
	}
	return nil
}

// WithPeople returns a copy of parent that uses the given People service.
func WithPeople(ctx context.Context, s sourcegraph.PeopleServer) context.Context {
	return context.WithValue(ctx, _PeopleKey, s)
}

// People gets the context's People service. If the service is not present, it panics.
func People(ctx context.Context) sourcegraph.PeopleServer {
	s, ok := ctx.Value(_PeopleKey).(sourcegraph.PeopleServer)
	if !ok || s == nil {
		panic("no People set in context")
	}
	return s
}

// PeopleOrNil returns the context's People service if present, or else nil.
func PeopleOrNil(ctx context.Context) sourcegraph.PeopleServer {
	s, ok := ctx.Value(_PeopleKey).(sourcegraph.PeopleServer)
	if ok {
		return s
	}
	return nil
}

// WithRegisteredClients returns a copy of parent that uses the given RegisteredClients service.
func WithRegisteredClients(ctx context.Context, s sourcegraph.RegisteredClientsServer) context.Context {
	return context.WithValue(ctx, _RegisteredClientsKey, s)
}

// RegisteredClients gets the context's RegisteredClients service. If the service is not present, it panics.
func RegisteredClients(ctx context.Context) sourcegraph.RegisteredClientsServer {
	s, ok := ctx.Value(_RegisteredClientsKey).(sourcegraph.RegisteredClientsServer)
	if !ok || s == nil {
		panic("no RegisteredClients set in context")
	}
	return s
}

// RegisteredClientsOrNil returns the context's RegisteredClients service if present, or else nil.
func RegisteredClientsOrNil(ctx context.Context) sourcegraph.RegisteredClientsServer {
	s, ok := ctx.Value(_RegisteredClientsKey).(sourcegraph.RegisteredClientsServer)
	if ok {
		return s
	}
	return nil
}

// WithRepoBadges returns a copy of parent that uses the given RepoBadges service.
func WithRepoBadges(ctx context.Context, s sourcegraph.RepoBadgesServer) context.Context {
	return context.WithValue(ctx, _RepoBadgesKey, s)
}

// RepoBadges gets the context's RepoBadges service. If the service is not present, it panics.
func RepoBadges(ctx context.Context) sourcegraph.RepoBadgesServer {
	s, ok := ctx.Value(_RepoBadgesKey).(sourcegraph.RepoBadgesServer)
	if !ok || s == nil {
		panic("no RepoBadges set in context")
	}
	return s
}

// RepoBadgesOrNil returns the context's RepoBadges service if present, or else nil.
func RepoBadgesOrNil(ctx context.Context) sourcegraph.RepoBadgesServer {
	s, ok := ctx.Value(_RepoBadgesKey).(sourcegraph.RepoBadgesServer)
	if ok {
		return s
	}
	return nil
}

// WithRepoStatuses returns a copy of parent that uses the given RepoStatuses service.
func WithRepoStatuses(ctx context.Context, s sourcegraph.RepoStatusesServer) context.Context {
	return context.WithValue(ctx, _RepoStatusesKey, s)
}

// RepoStatuses gets the context's RepoStatuses service. If the service is not present, it panics.
func RepoStatuses(ctx context.Context) sourcegraph.RepoStatusesServer {
	s, ok := ctx.Value(_RepoStatusesKey).(sourcegraph.RepoStatusesServer)
	if !ok || s == nil {
		panic("no RepoStatuses set in context")
	}
	return s
}

// RepoStatusesOrNil returns the context's RepoStatuses service if present, or else nil.
func RepoStatusesOrNil(ctx context.Context) sourcegraph.RepoStatusesServer {
	s, ok := ctx.Value(_RepoStatusesKey).(sourcegraph.RepoStatusesServer)
	if ok {
		return s
	}
	return nil
}

// WithRepoTree returns a copy of parent that uses the given RepoTree service.
func WithRepoTree(ctx context.Context, s sourcegraph.RepoTreeServer) context.Context {
	return context.WithValue(ctx, _RepoTreeKey, s)
}

// RepoTree gets the context's RepoTree service. If the service is not present, it panics.
func RepoTree(ctx context.Context) sourcegraph.RepoTreeServer {
	s, ok := ctx.Value(_RepoTreeKey).(sourcegraph.RepoTreeServer)
	if !ok || s == nil {
		panic("no RepoTree set in context")
	}
	return s
}

// RepoTreeOrNil returns the context's RepoTree service if present, or else nil.
func RepoTreeOrNil(ctx context.Context) sourcegraph.RepoTreeServer {
	s, ok := ctx.Value(_RepoTreeKey).(sourcegraph.RepoTreeServer)
	if ok {
		return s
	}
	return nil
}

// WithRepos returns a copy of parent that uses the given Repos service.
func WithRepos(ctx context.Context, s sourcegraph.ReposServer) context.Context {
	return context.WithValue(ctx, _ReposKey, s)
}

// Repos gets the context's Repos service. If the service is not present, it panics.
func Repos(ctx context.Context) sourcegraph.ReposServer {
	s, ok := ctx.Value(_ReposKey).(sourcegraph.ReposServer)
	if !ok || s == nil {
		panic("no Repos set in context")
	}
	return s
}

// ReposOrNil returns the context's Repos service if present, or else nil.
func ReposOrNil(ctx context.Context) sourcegraph.ReposServer {
	s, ok := ctx.Value(_ReposKey).(sourcegraph.ReposServer)
	if ok {
		return s
	}
	return nil
}

// WithSearch returns a copy of parent that uses the given Search service.
func WithSearch(ctx context.Context, s sourcegraph.SearchServer) context.Context {
	return context.WithValue(ctx, _SearchKey, s)
}

// Search gets the context's Search service. If the service is not present, it panics.
func Search(ctx context.Context) sourcegraph.SearchServer {
	s, ok := ctx.Value(_SearchKey).(sourcegraph.SearchServer)
	if !ok || s == nil {
		panic("no Search set in context")
	}
	return s
}

// SearchOrNil returns the context's Search service if present, or else nil.
func SearchOrNil(ctx context.Context) sourcegraph.SearchServer {
	s, ok := ctx.Value(_SearchKey).(sourcegraph.SearchServer)
	if ok {
		return s
	}
	return nil
}

// WithStorage returns a copy of parent that uses the given Storage service.
func WithStorage(ctx context.Context, s sourcegraph.StorageServer) context.Context {
	return context.WithValue(ctx, _StorageKey, s)
}

// Storage gets the context's Storage service. If the service is not present, it panics.
func Storage(ctx context.Context) sourcegraph.StorageServer {
	s, ok := ctx.Value(_StorageKey).(sourcegraph.StorageServer)
	if !ok || s == nil {
		panic("no Storage set in context")
	}
	return s
}

// StorageOrNil returns the context's Storage service if present, or else nil.
func StorageOrNil(ctx context.Context) sourcegraph.StorageServer {
	s, ok := ctx.Value(_StorageKey).(sourcegraph.StorageServer)
	if ok {
		return s
	}
	return nil
}

// WithUnits returns a copy of parent that uses the given Units service.
func WithUnits(ctx context.Context, s sourcegraph.UnitsServer) context.Context {
	return context.WithValue(ctx, _UnitsKey, s)
}

// Units gets the context's Units service. If the service is not present, it panics.
func Units(ctx context.Context) sourcegraph.UnitsServer {
	s, ok := ctx.Value(_UnitsKey).(sourcegraph.UnitsServer)
	if !ok || s == nil {
		panic("no Units set in context")
	}
	return s
}

// UnitsOrNil returns the context's Units service if present, or else nil.
func UnitsOrNil(ctx context.Context) sourcegraph.UnitsServer {
	s, ok := ctx.Value(_UnitsKey).(sourcegraph.UnitsServer)
	if ok {
		return s
	}
	return nil
}

// WithUserKeys returns a copy of parent that uses the given UserKeys service.
func WithUserKeys(ctx context.Context, s sourcegraph.UserKeysServer) context.Context {
	return context.WithValue(ctx, _UserKeysKey, s)
}

// UserKeys gets the context's UserKeys service. If the service is not present, it panics.
func UserKeys(ctx context.Context) sourcegraph.UserKeysServer {
	s, ok := ctx.Value(_UserKeysKey).(sourcegraph.UserKeysServer)
	if !ok || s == nil {
		panic("no UserKeys set in context")
	}
	return s
}

// UserKeysOrNil returns the context's UserKeys service if present, or else nil.
func UserKeysOrNil(ctx context.Context) sourcegraph.UserKeysServer {
	s, ok := ctx.Value(_UserKeysKey).(sourcegraph.UserKeysServer)
	if ok {
		return s
	}
	return nil
}

// WithUsers returns a copy of parent that uses the given Users service.
func WithUsers(ctx context.Context, s sourcegraph.UsersServer) context.Context {
	return context.WithValue(ctx, _UsersKey, s)
}

// Users gets the context's Users service. If the service is not present, it panics.
func Users(ctx context.Context) sourcegraph.UsersServer {
	s, ok := ctx.Value(_UsersKey).(sourcegraph.UsersServer)
	if !ok || s == nil {
		panic("no Users set in context")
	}
	return s
}

// UsersOrNil returns the context's Users service if present, or else nil.
func UsersOrNil(ctx context.Context) sourcegraph.UsersServer {
	s, ok := ctx.Value(_UsersKey).(sourcegraph.UsersServer)
	if ok {
		return s
	}
	return nil
}
