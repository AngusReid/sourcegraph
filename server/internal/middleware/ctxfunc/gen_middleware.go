// +build ignore

package main

import (
	"text/template"

	"src.sourcegraph.com/sourcegraph/gen"
)

func main() {
	svcs := []string{
		"../../../../go-sourcegraph/sourcegraph/sourcegraph.pb.go",
		"../../../../Godeps/_workspace/src/sourcegraph.com/sourcegraph/srclib/store/pb/srcstore.pb.go",
		"../../../../gitserver/gitpb/git_transport.pb.go",
	}
	gen.Generate("middleware.go", tmpl, svcs, nil)
}

var tmpl = template.Must(template.New("").Delims("<<<", ">>>").Parse(`// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_middleware.go
//
// Called via:
//
//   go generate
//

package ctxfunc

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"src.sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"
	"sourcegraph.com/sourcegraph/go-vcs/vcs"
	"src.sourcegraph.com/sourcegraph/gitserver/gitpb"
	"src.sourcegraph.com/sourcegraph/svc"
	"sourcegraph.com/sourcegraph/srclib/store/pb"
	"sourcegraph.com/sourcegraph/srclib/unit"
	"sourcegraph.com/sqs/pbtypes"
)

// A ContextFunc is called before a method executes and lets you customize its context.
type ContextFunc func(context.Context) (context.Context, error)

// An ErrorFunc maps from one error to another (e.g., app-specific error to a gRPC error code).
type ErrorFunc func(error) error

// Services returns a full set of services with an implementation of each service method that lets you customize the initial context.Context and map Go errors to gRPC error codes. It is similar to HTTP handler middleware, but for gRPC servers.
func Services(ctxFunc ContextFunc, errFunc ErrorFunc) svc.Services {
	s := svc.Services{
		<<<range .>>><<<.Name>>>: wrapped<<<.Name>>>{ctxFunc, errFunc},
		<<<end>>>
	}
	return s
}

<<<range .>>>
	type wrapped<<<.Name>>> struct{
		ctxFunc ContextFunc
		errFunc ErrorFunc
	}

  <<<$service := .>>>
	<<<range .Methods>>>
		func (s wrapped<<<$service.Name>>>) <<<.Name>>>(ctx context.Context, v1 <<<.ParamType>>>) (<<<.ResultType>>>, error) {
			var err error
			ctx, err = s.ctxFunc(ctx)
			if err != nil {
				return nil, s.errFunc(err)
			}
			svc := svc.<<<$service.Name>>>OrNil(ctx)
			if svc == nil {
				return nil, grpc.Errorf(codes.Unimplemented, "<<<$service.Name>>>")
			}
			rv, err := svc.<<<.Name>>>(ctx, v1)
			return rv, s.errFunc(err)
		}
	<<<end>>>
<<<end>>>
`))
