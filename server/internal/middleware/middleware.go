// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_middleware.go
//
// Called via:
//
//   go generate
//

package middleware

import (
	"time"

	"golang.org/x/net/context"
	"sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph"
	"sourcegraph.com/sourcegraph/go-vcs/vcs"
	"sourcegraph.com/sourcegraph/srclib/store/pb"
	"sourcegraph.com/sourcegraph/srclib/unit"
	"sourcegraph.com/sqs/pbtypes"
	"src.sourcegraph.com/sourcegraph/gitserver/gitpb"
	"src.sourcegraph.com/sourcegraph/server/internal/middleware/auth"
	"src.sourcegraph.com/sourcegraph/server/internal/middleware/federated"
	"src.sourcegraph.com/sourcegraph/server/internal/middleware/trace"
	"src.sourcegraph.com/sourcegraph/svc"
)

// Wrap wraps the services and returns a set of services that performs
// authorization checks as specified in the Config.
func Wrap(s svc.Services, c *auth.Config) svc.Services {

	if s.GitTransport != nil {
		s.GitTransport = wrappedGitTransport{s.GitTransport, c}
	}

	if s.MultiRepoImporter != nil {
		s.MultiRepoImporter = wrappedMultiRepoImporter{s.MultiRepoImporter, c}
	}

	if s.Accounts != nil {
		s.Accounts = wrappedAccounts{s.Accounts, c}
	}

	if s.Auth != nil {
		s.Auth = wrappedAuth{s.Auth, c}
	}

	if s.Builds != nil {
		s.Builds = wrappedBuilds{s.Builds, c}
	}

	if s.Changesets != nil {
		s.Changesets = wrappedChangesets{s.Changesets, c}
	}

	if s.Defs != nil {
		s.Defs = wrappedDefs{s.Defs, c}
	}

	if s.Deltas != nil {
		s.Deltas = wrappedDeltas{s.Deltas, c}
	}

	if s.Discussions != nil {
		s.Discussions = wrappedDiscussions{s.Discussions, c}
	}

	if s.GraphUplink != nil {
		s.GraphUplink = wrappedGraphUplink{s.GraphUplink, c}
	}

	if s.Markdown != nil {
		s.Markdown = wrappedMarkdown{s.Markdown, c}
	}

	if s.Meta != nil {
		s.Meta = wrappedMeta{s.Meta, c}
	}

	if s.MirrorRepos != nil {
		s.MirrorRepos = wrappedMirrorRepos{s.MirrorRepos, c}
	}

	if s.MirroredRepoSSHKeys != nil {
		s.MirroredRepoSSHKeys = wrappedMirroredRepoSSHKeys{s.MirroredRepoSSHKeys, c}
	}

	if s.Notify != nil {
		s.Notify = wrappedNotify{s.Notify, c}
	}

	if s.Orgs != nil {
		s.Orgs = wrappedOrgs{s.Orgs, c}
	}

	if s.People != nil {
		s.People = wrappedPeople{s.People, c}
	}

	if s.RegisteredClients != nil {
		s.RegisteredClients = wrappedRegisteredClients{s.RegisteredClients, c}
	}

	if s.RepoBadges != nil {
		s.RepoBadges = wrappedRepoBadges{s.RepoBadges, c}
	}

	if s.RepoStatuses != nil {
		s.RepoStatuses = wrappedRepoStatuses{s.RepoStatuses, c}
	}

	if s.RepoTree != nil {
		s.RepoTree = wrappedRepoTree{s.RepoTree, c}
	}

	if s.Repos != nil {
		s.Repos = wrappedRepos{s.Repos, c}
	}

	if s.Search != nil {
		s.Search = wrappedSearch{s.Search, c}
	}

	if s.Storage != nil {
		s.Storage = wrappedStorage{s.Storage, c}
	}

	if s.Units != nil {
		s.Units = wrappedUnits{s.Units, c}
	}

	if s.UserKeys != nil {
		s.UserKeys = wrappedUserKeys{s.UserKeys, c}
	}

	if s.Users != nil {
		s.Users = wrappedUsers{s.Users, c}
	}

	return s
}

type wrappedGitTransport struct {
	u gitpb.GitTransportServer
	c *auth.Config
}

func (s wrappedGitTransport) InfoRefs(ctx context.Context, param *gitpb.InfoRefsOp) (res *gitpb.Packet, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "GitTransport", "InfoRefs", param)
	defer func() {
		trace.After(ctx, "GitTransport", "InfoRefs", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "GitTransport.InfoRefs")
	if err != nil {
		return
	}

	var target gitpb.GitTransportServer = s.u

	res, err = target.InfoRefs(ctx, param)
	return

}

func (s wrappedGitTransport) ReceivePack(ctx context.Context, param *gitpb.ReceivePackOp) (res *gitpb.Packet, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "GitTransport", "ReceivePack", param)
	defer func() {
		trace.After(ctx, "GitTransport", "ReceivePack", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "GitTransport.ReceivePack")
	if err != nil {
		return
	}

	var target gitpb.GitTransportServer = s.u

	res, err = target.ReceivePack(ctx, param)
	return

}

func (s wrappedGitTransport) UploadPack(ctx context.Context, param *gitpb.UploadPackOp) (res *gitpb.Packet, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "GitTransport", "UploadPack", param)
	defer func() {
		trace.After(ctx, "GitTransport", "UploadPack", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "GitTransport.UploadPack")
	if err != nil {
		return
	}

	var target gitpb.GitTransportServer = s.u

	res, err = target.UploadPack(ctx, param)
	return

}

type wrappedMultiRepoImporter struct {
	u pb.MultiRepoImporterServer
	c *auth.Config
}

func (s wrappedMultiRepoImporter) Import(ctx context.Context, param *pb.ImportOp) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "MultiRepoImporter", "Import", param)
	defer func() {
		trace.After(ctx, "MultiRepoImporter", "Import", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "MultiRepoImporter.Import")
	if err != nil {
		return
	}

	var target pb.MultiRepoImporterServer = s.u

	res, err = target.Import(ctx, param)
	return

}

func (s wrappedMultiRepoImporter) Index(ctx context.Context, param *pb.IndexOp) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "MultiRepoImporter", "Index", param)
	defer func() {
		trace.After(ctx, "MultiRepoImporter", "Index", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "MultiRepoImporter.Index")
	if err != nil {
		return
	}

	var target pb.MultiRepoImporterServer = s.u

	res, err = target.Index(ctx, param)
	return

}

type wrappedAccounts struct {
	u sourcegraph.AccountsServer
	c *auth.Config
}

func (s wrappedAccounts) Create(ctx context.Context, param *sourcegraph.NewAccount) (res *sourcegraph.UserSpec, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Accounts", "Create", param)
	defer func() {
		trace.After(ctx, "Accounts", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Accounts.Create")
	if err != nil {
		return
	}

	var target sourcegraph.AccountsServer = s.u

	res, err = target.Create(ctx, param)
	return

}

func (s wrappedAccounts) RequestPasswordReset(ctx context.Context, param *sourcegraph.EmailAddr) (res *sourcegraph.User, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Accounts", "RequestPasswordReset", param)
	defer func() {
		trace.After(ctx, "Accounts", "RequestPasswordReset", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Accounts.RequestPasswordReset")
	if err != nil {
		return
	}

	var target sourcegraph.AccountsServer = s.u

	res, err = target.RequestPasswordReset(ctx, param)
	return

}

func (s wrappedAccounts) ResetPassword(ctx context.Context, param *sourcegraph.NewPassword) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Accounts", "ResetPassword", param)
	defer func() {
		trace.After(ctx, "Accounts", "ResetPassword", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Accounts.ResetPassword")
	if err != nil {
		return
	}

	var target sourcegraph.AccountsServer = s.u

	res, err = target.ResetPassword(ctx, param)
	return

}

func (s wrappedAccounts) Update(ctx context.Context, param *sourcegraph.User) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Accounts", "Update", param)
	defer func() {
		trace.After(ctx, "Accounts", "Update", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Accounts.Update")
	if err != nil {
		return
	}

	res, err = federated.CustomAccountsUpdate(ctx, param, s.u)
	return

}

type wrappedAuth struct {
	u sourcegraph.AuthServer
	c *auth.Config
}

func (s wrappedAuth) GetAuthorizationCode(ctx context.Context, param *sourcegraph.AuthorizationCodeRequest) (res *sourcegraph.AuthorizationCode, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Auth", "GetAuthorizationCode", param)
	defer func() {
		trace.After(ctx, "Auth", "GetAuthorizationCode", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Auth.GetAuthorizationCode")
	if err != nil {
		return
	}

	var target sourcegraph.AuthServer = s.u

	res, err = target.GetAuthorizationCode(ctx, param)
	return

}

func (s wrappedAuth) GetAccessToken(ctx context.Context, param *sourcegraph.AccessTokenRequest) (res *sourcegraph.AccessTokenResponse, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Auth", "GetAccessToken", param)
	defer func() {
		trace.After(ctx, "Auth", "GetAccessToken", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Auth.GetAccessToken")
	if err != nil {
		return
	}

	res, err = federated.CustomAuthGetAccessToken(ctx, param, s.u)
	return

}

func (s wrappedAuth) Identify(ctx context.Context, param *pbtypes.Void) (res *sourcegraph.AuthInfo, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Auth", "Identify", param)
	defer func() {
		trace.After(ctx, "Auth", "Identify", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Auth.Identify")
	if err != nil {
		return
	}

	res, err = federated.CustomAuthIdentify(ctx, param, s.u)
	return

}

func (s wrappedAuth) GetPermissions(ctx context.Context, param *pbtypes.Void) (res *sourcegraph.UserPermissions, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Auth", "GetPermissions", param)
	defer func() {
		trace.After(ctx, "Auth", "GetPermissions", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Auth.GetPermissions")
	if err != nil {
		return
	}

	var target sourcegraph.AuthServer = s.u

	res, err = target.GetPermissions(ctx, param)
	return

}

type wrappedBuilds struct {
	u sourcegraph.BuildsServer
	c *auth.Config
}

func (s wrappedBuilds) Get(ctx context.Context, param *sourcegraph.BuildSpec) (res *sourcegraph.Build, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "Get", param)
	defer func() {
		trace.After(ctx, "Builds", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.Get")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedBuilds) GetRepoBuildInfo(ctx context.Context, param *sourcegraph.BuildsGetRepoBuildInfoOp) (res *sourcegraph.RepoBuildInfo, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "GetRepoBuildInfo", param)
	defer func() {
		trace.After(ctx, "Builds", "GetRepoBuildInfo", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.GetRepoBuildInfo")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetRepoBuildInfo(ctx, param)
	return

}

func (s wrappedBuilds) List(ctx context.Context, param *sourcegraph.BuildListOptions) (res *sourcegraph.BuildList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "List", param)
	defer func() {
		trace.After(ctx, "Builds", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.List")
	if err != nil {
		return
	}

	res, err = federated.CustomBuildsList(ctx, param, s.u)
	return

}

func (s wrappedBuilds) Create(ctx context.Context, param *sourcegraph.BuildsCreateOp) (res *sourcegraph.Build, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "Create", param)
	defer func() {
		trace.After(ctx, "Builds", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.Create")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.RepoRev.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Create(ctx, param)
	return

}

func (s wrappedBuilds) Update(ctx context.Context, param *sourcegraph.BuildsUpdateOp) (res *sourcegraph.Build, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "Update", param)
	defer func() {
		trace.After(ctx, "Builds", "Update", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.Update")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Build.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Update(ctx, param)
	return

}

func (s wrappedBuilds) ListBuildTasks(ctx context.Context, param *sourcegraph.BuildsListBuildTasksOp) (res *sourcegraph.BuildTaskList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "ListBuildTasks", param)
	defer func() {
		trace.After(ctx, "Builds", "ListBuildTasks", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.ListBuildTasks")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Build.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListBuildTasks(ctx, param)
	return

}

func (s wrappedBuilds) CreateTasks(ctx context.Context, param *sourcegraph.BuildsCreateTasksOp) (res *sourcegraph.BuildTaskList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "CreateTasks", param)
	defer func() {
		trace.After(ctx, "Builds", "CreateTasks", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.CreateTasks")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Build.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.CreateTasks(ctx, param)
	return

}

func (s wrappedBuilds) UpdateTask(ctx context.Context, param *sourcegraph.BuildsUpdateTaskOp) (res *sourcegraph.BuildTask, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "UpdateTask", param)
	defer func() {
		trace.After(ctx, "Builds", "UpdateTask", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.UpdateTask")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Task.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.UpdateTask(ctx, param)
	return

}

func (s wrappedBuilds) GetLog(ctx context.Context, param *sourcegraph.BuildsGetLogOp) (res *sourcegraph.LogEntries, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "GetLog", param)
	defer func() {
		trace.After(ctx, "Builds", "GetLog", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.GetLog")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Build.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetLog(ctx, param)
	return

}

func (s wrappedBuilds) GetTaskLog(ctx context.Context, param *sourcegraph.BuildsGetTaskLogOp) (res *sourcegraph.LogEntries, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "GetTaskLog", param)
	defer func() {
		trace.After(ctx, "Builds", "GetTaskLog", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.GetTaskLog")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Task.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Builds(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetTaskLog(ctx, param)
	return

}

func (s wrappedBuilds) DequeueNext(ctx context.Context, param *sourcegraph.BuildsDequeueNextOp) (res *sourcegraph.Build, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Builds", "DequeueNext", param)
	defer func() {
		trace.After(ctx, "Builds", "DequeueNext", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Builds.DequeueNext")
	if err != nil {
		return
	}

	var target sourcegraph.BuildsServer = s.u

	res, err = target.DequeueNext(ctx, param)
	return

}

type wrappedChangesets struct {
	u sourcegraph.ChangesetsServer
	c *auth.Config
}

func (s wrappedChangesets) Create(ctx context.Context, param *sourcegraph.ChangesetCreateOp) (res *sourcegraph.Changeset, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "Create", param)
	defer func() {
		trace.After(ctx, "Changesets", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.Create")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.Create(ctx, param)
	return

}

func (s wrappedChangesets) Get(ctx context.Context, param *sourcegraph.ChangesetSpec) (res *sourcegraph.Changeset, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "Get", param)
	defer func() {
		trace.After(ctx, "Changesets", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.Get")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedChangesets) List(ctx context.Context, param *sourcegraph.ChangesetListOp) (res *sourcegraph.ChangesetList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "List", param)
	defer func() {
		trace.After(ctx, "Changesets", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.List")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.List(ctx, param)
	return

}

func (s wrappedChangesets) Update(ctx context.Context, param *sourcegraph.ChangesetUpdateOp) (res *sourcegraph.ChangesetEvent, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "Update", param)
	defer func() {
		trace.After(ctx, "Changesets", "Update", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.Update")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.Update(ctx, param)
	return

}

func (s wrappedChangesets) Merge(ctx context.Context, param *sourcegraph.ChangesetMergeOp) (res *sourcegraph.ChangesetEvent, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "Merge", param)
	defer func() {
		trace.After(ctx, "Changesets", "Merge", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.Merge")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.Merge(ctx, param)
	return

}

func (s wrappedChangesets) UpdateAffected(ctx context.Context, param *sourcegraph.ChangesetUpdateAffectedOp) (res *sourcegraph.ChangesetEventList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "UpdateAffected", param)
	defer func() {
		trace.After(ctx, "Changesets", "UpdateAffected", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.UpdateAffected")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.UpdateAffected(ctx, param)
	return

}

func (s wrappedChangesets) CreateReview(ctx context.Context, param *sourcegraph.ChangesetCreateReviewOp) (res *sourcegraph.ChangesetReview, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "CreateReview", param)
	defer func() {
		trace.After(ctx, "Changesets", "CreateReview", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.CreateReview")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.CreateReview(ctx, param)
	return

}

func (s wrappedChangesets) ListReviews(ctx context.Context, param *sourcegraph.ChangesetListReviewsOp) (res *sourcegraph.ChangesetReviewList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "ListReviews", param)
	defer func() {
		trace.After(ctx, "Changesets", "ListReviews", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.ListReviews")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.ListReviews(ctx, param)
	return

}

func (s wrappedChangesets) ListEvents(ctx context.Context, param *sourcegraph.ChangesetSpec) (res *sourcegraph.ChangesetEventList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Changesets", "ListEvents", param)
	defer func() {
		trace.After(ctx, "Changesets", "ListEvents", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Changesets.ListEvents")
	if err != nil {
		return
	}

	var target sourcegraph.ChangesetsServer = s.u

	res, err = target.ListEvents(ctx, param)
	return

}

type wrappedDefs struct {
	u sourcegraph.DefsServer
	c *auth.Config
}

func (s wrappedDefs) Get(ctx context.Context, param *sourcegraph.DefsGetOp) (res *sourcegraph.Def, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Defs", "Get", param)
	defer func() {
		trace.After(ctx, "Defs", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Defs.Get")
	if err != nil {
		return
	}

	var target sourcegraph.DefsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Def.Repo)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Defs(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedDefs) List(ctx context.Context, param *sourcegraph.DefListOptions) (res *sourcegraph.DefList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Defs", "List", param)
	defer func() {
		trace.After(ctx, "Defs", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Defs.List")
	if err != nil {
		return
	}

	res, err = federated.CustomDefsList(ctx, param, s.u)
	return

}

func (s wrappedDefs) ListRefs(ctx context.Context, param *sourcegraph.DefsListRefsOp) (res *sourcegraph.RefList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Defs", "ListRefs", param)
	defer func() {
		trace.After(ctx, "Defs", "ListRefs", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Defs.ListRefs")
	if err != nil {
		return
	}

	var target sourcegraph.DefsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Def.Repo)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Defs(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListRefs(ctx, param)
	return

}

func (s wrappedDefs) ListExamples(ctx context.Context, param *sourcegraph.DefsListExamplesOp) (res *sourcegraph.ExampleList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Defs", "ListExamples", param)
	defer func() {
		trace.After(ctx, "Defs", "ListExamples", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Defs.ListExamples")
	if err != nil {
		return
	}

	var target sourcegraph.DefsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Def.Repo)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Defs(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListExamples(ctx, param)
	return

}

func (s wrappedDefs) ListAuthors(ctx context.Context, param *sourcegraph.DefsListAuthorsOp) (res *sourcegraph.DefAuthorList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Defs", "ListAuthors", param)
	defer func() {
		trace.After(ctx, "Defs", "ListAuthors", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Defs.ListAuthors")
	if err != nil {
		return
	}

	var target sourcegraph.DefsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Def.Repo)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Defs(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListAuthors(ctx, param)
	return

}

func (s wrappedDefs) ListClients(ctx context.Context, param *sourcegraph.DefsListClientsOp) (res *sourcegraph.DefClientList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Defs", "ListClients", param)
	defer func() {
		trace.After(ctx, "Defs", "ListClients", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Defs.ListClients")
	if err != nil {
		return
	}

	var target sourcegraph.DefsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Def.Repo)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Defs(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListClients(ctx, param)
	return

}

type wrappedDeltas struct {
	u sourcegraph.DeltasServer
	c *auth.Config
}

func (s wrappedDeltas) Get(ctx context.Context, param *sourcegraph.DeltaSpec) (res *sourcegraph.Delta, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Deltas", "Get", param)
	defer func() {
		trace.After(ctx, "Deltas", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Deltas.Get")
	if err != nil {
		return
	}

	var target sourcegraph.DeltasServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Base.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Deltas(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedDeltas) ListUnits(ctx context.Context, param *sourcegraph.DeltasListUnitsOp) (res *sourcegraph.UnitDeltaList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Deltas", "ListUnits", param)
	defer func() {
		trace.After(ctx, "Deltas", "ListUnits", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Deltas.ListUnits")
	if err != nil {
		return
	}

	var target sourcegraph.DeltasServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Ds.Base.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Deltas(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListUnits(ctx, param)
	return

}

func (s wrappedDeltas) ListDefs(ctx context.Context, param *sourcegraph.DeltasListDefsOp) (res *sourcegraph.DeltaDefs, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Deltas", "ListDefs", param)
	defer func() {
		trace.After(ctx, "Deltas", "ListDefs", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Deltas.ListDefs")
	if err != nil {
		return
	}

	var target sourcegraph.DeltasServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Ds.Base.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Deltas(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListDefs(ctx, param)
	return

}

func (s wrappedDeltas) ListFiles(ctx context.Context, param *sourcegraph.DeltasListFilesOp) (res *sourcegraph.DeltaFiles, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Deltas", "ListFiles", param)
	defer func() {
		trace.After(ctx, "Deltas", "ListFiles", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Deltas.ListFiles")
	if err != nil {
		return
	}

	var target sourcegraph.DeltasServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Ds.Base.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Deltas(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListFiles(ctx, param)
	return

}

func (s wrappedDeltas) ListAffectedAuthors(ctx context.Context, param *sourcegraph.DeltasListAffectedAuthorsOp) (res *sourcegraph.DeltaAffectedPersonList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Deltas", "ListAffectedAuthors", param)
	defer func() {
		trace.After(ctx, "Deltas", "ListAffectedAuthors", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Deltas.ListAffectedAuthors")
	if err != nil {
		return
	}

	var target sourcegraph.DeltasServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Ds.Base.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Deltas(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListAffectedAuthors(ctx, param)
	return

}

func (s wrappedDeltas) ListAffectedClients(ctx context.Context, param *sourcegraph.DeltasListAffectedClientsOp) (res *sourcegraph.DeltaAffectedPersonList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Deltas", "ListAffectedClients", param)
	defer func() {
		trace.After(ctx, "Deltas", "ListAffectedClients", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Deltas.ListAffectedClients")
	if err != nil {
		return
	}

	var target sourcegraph.DeltasServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Ds.Base.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Deltas(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListAffectedClients(ctx, param)
	return

}

type wrappedDiscussions struct {
	u sourcegraph.DiscussionsServer
	c *auth.Config
}

func (s wrappedDiscussions) Create(ctx context.Context, param *sourcegraph.Discussion) (res *sourcegraph.Discussion, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Discussions", "Create", param)
	defer func() {
		trace.After(ctx, "Discussions", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Discussions.Create")
	if err != nil {
		return
	}

	var target sourcegraph.DiscussionsServer = s.u

	res, err = target.Create(ctx, param)
	return

}

func (s wrappedDiscussions) Get(ctx context.Context, param *sourcegraph.DiscussionSpec) (res *sourcegraph.Discussion, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Discussions", "Get", param)
	defer func() {
		trace.After(ctx, "Discussions", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Discussions.Get")
	if err != nil {
		return
	}

	var target sourcegraph.DiscussionsServer = s.u

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedDiscussions) List(ctx context.Context, param *sourcegraph.DiscussionListOp) (res *sourcegraph.DiscussionList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Discussions", "List", param)
	defer func() {
		trace.After(ctx, "Discussions", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Discussions.List")
	if err != nil {
		return
	}

	var target sourcegraph.DiscussionsServer = s.u

	res, err = target.List(ctx, param)
	return

}

func (s wrappedDiscussions) CreateComment(ctx context.Context, param *sourcegraph.DiscussionCommentCreateOp) (res *sourcegraph.DiscussionComment, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Discussions", "CreateComment", param)
	defer func() {
		trace.After(ctx, "Discussions", "CreateComment", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Discussions.CreateComment")
	if err != nil {
		return
	}

	var target sourcegraph.DiscussionsServer = s.u

	res, err = target.CreateComment(ctx, param)
	return

}

func (s wrappedDiscussions) UpdateRating(ctx context.Context, param *sourcegraph.DiscussionRatingUpdateOp) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Discussions", "UpdateRating", param)
	defer func() {
		trace.After(ctx, "Discussions", "UpdateRating", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Discussions.UpdateRating")
	if err != nil {
		return
	}

	var target sourcegraph.DiscussionsServer = s.u

	res, err = target.UpdateRating(ctx, param)
	return

}

type wrappedGraphUplink struct {
	u sourcegraph.GraphUplinkServer
	c *auth.Config
}

func (s wrappedGraphUplink) Push(ctx context.Context, param *sourcegraph.MetricsSnapshot) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "GraphUplink", "Push", param)
	defer func() {
		trace.After(ctx, "GraphUplink", "Push", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "GraphUplink.Push")
	if err != nil {
		return
	}

	var target sourcegraph.GraphUplinkServer = s.u

	res, err = target.Push(ctx, param)
	return

}

func (s wrappedGraphUplink) PushEvents(ctx context.Context, param *sourcegraph.UserEventList) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "GraphUplink", "PushEvents", param)
	defer func() {
		trace.After(ctx, "GraphUplink", "PushEvents", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "GraphUplink.PushEvents")
	if err != nil {
		return
	}

	var target sourcegraph.GraphUplinkServer = s.u

	res, err = target.PushEvents(ctx, param)
	return

}

type wrappedMarkdown struct {
	u sourcegraph.MarkdownServer
	c *auth.Config
}

func (s wrappedMarkdown) Render(ctx context.Context, param *sourcegraph.MarkdownRenderOp) (res *sourcegraph.MarkdownData, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Markdown", "Render", param)
	defer func() {
		trace.After(ctx, "Markdown", "Render", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Markdown.Render")
	if err != nil {
		return
	}

	var target sourcegraph.MarkdownServer = s.u

	res, err = target.Render(ctx, param)
	return

}

type wrappedMeta struct {
	u sourcegraph.MetaServer
	c *auth.Config
}

func (s wrappedMeta) Status(ctx context.Context, param *pbtypes.Void) (res *sourcegraph.ServerStatus, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Meta", "Status", param)
	defer func() {
		trace.After(ctx, "Meta", "Status", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Meta.Status")
	if err != nil {
		return
	}

	var target sourcegraph.MetaServer = s.u

	res, err = target.Status(ctx, param)
	return

}

func (s wrappedMeta) Config(ctx context.Context, param *pbtypes.Void) (res *sourcegraph.ServerConfig, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Meta", "Config", param)
	defer func() {
		trace.After(ctx, "Meta", "Config", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Meta.Config")
	if err != nil {
		return
	}

	var target sourcegraph.MetaServer = s.u

	res, err = target.Config(ctx, param)
	return

}

func (s wrappedMeta) PubKey(ctx context.Context, param *pbtypes.Void) (res *sourcegraph.ServerPubKey, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Meta", "PubKey", param)
	defer func() {
		trace.After(ctx, "Meta", "PubKey", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Meta.PubKey")
	if err != nil {
		return
	}

	var target sourcegraph.MetaServer = s.u

	res, err = target.PubKey(ctx, param)
	return

}

type wrappedMirrorRepos struct {
	u sourcegraph.MirrorReposServer
	c *auth.Config
}

func (s wrappedMirrorRepos) RefreshVCS(ctx context.Context, param *sourcegraph.MirrorReposRefreshVCSOp) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "MirrorRepos", "RefreshVCS", param)
	defer func() {
		trace.After(ctx, "MirrorRepos", "RefreshVCS", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "MirrorRepos.RefreshVCS")
	if err != nil {
		return
	}

	res, err = federated.CustomMirrorReposRefreshVCS(ctx, param, s.u)
	return

}

type wrappedMirroredRepoSSHKeys struct {
	u sourcegraph.MirroredRepoSSHKeysServer
	c *auth.Config
}

func (s wrappedMirroredRepoSSHKeys) Create(ctx context.Context, param *sourcegraph.MirroredRepoSSHKeysCreateOp) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "MirroredRepoSSHKeys", "Create", param)
	defer func() {
		trace.After(ctx, "MirroredRepoSSHKeys", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "MirroredRepoSSHKeys.Create")
	if err != nil {
		return
	}

	var target sourcegraph.MirroredRepoSSHKeysServer = s.u

	res, err = target.Create(ctx, param)
	return

}

func (s wrappedMirroredRepoSSHKeys) Get(ctx context.Context, param *sourcegraph.RepoSpec) (res *sourcegraph.SSHPrivateKey, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "MirroredRepoSSHKeys", "Get", param)
	defer func() {
		trace.After(ctx, "MirroredRepoSSHKeys", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "MirroredRepoSSHKeys.Get")
	if err != nil {
		return
	}

	var target sourcegraph.MirroredRepoSSHKeysServer = s.u

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedMirroredRepoSSHKeys) Delete(ctx context.Context, param *sourcegraph.RepoSpec) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "MirroredRepoSSHKeys", "Delete", param)
	defer func() {
		trace.After(ctx, "MirroredRepoSSHKeys", "Delete", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "MirroredRepoSSHKeys.Delete")
	if err != nil {
		return
	}

	var target sourcegraph.MirroredRepoSSHKeysServer = s.u

	res, err = target.Delete(ctx, param)
	return

}

type wrappedNotify struct {
	u sourcegraph.NotifyServer
	c *auth.Config
}

func (s wrappedNotify) GenericEvent(ctx context.Context, param *sourcegraph.NotifyGenericEvent) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Notify", "GenericEvent", param)
	defer func() {
		trace.After(ctx, "Notify", "GenericEvent", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Notify.GenericEvent")
	if err != nil {
		return
	}

	var target sourcegraph.NotifyServer = s.u

	res, err = target.GenericEvent(ctx, param)
	return

}

type wrappedOrgs struct {
	u sourcegraph.OrgsServer
	c *auth.Config
}

func (s wrappedOrgs) Get(ctx context.Context, param *sourcegraph.OrgSpec) (res *sourcegraph.Org, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Orgs", "Get", param)
	defer func() {
		trace.After(ctx, "Orgs", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Orgs.Get")
	if err != nil {
		return
	}

	var target sourcegraph.OrgsServer = s.u

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedOrgs) List(ctx context.Context, param *sourcegraph.OrgsListOp) (res *sourcegraph.OrgList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Orgs", "List", param)
	defer func() {
		trace.After(ctx, "Orgs", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Orgs.List")
	if err != nil {
		return
	}

	var target sourcegraph.OrgsServer = s.u

	res, err = target.List(ctx, param)
	return

}

func (s wrappedOrgs) ListMembers(ctx context.Context, param *sourcegraph.OrgsListMembersOp) (res *sourcegraph.UserList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Orgs", "ListMembers", param)
	defer func() {
		trace.After(ctx, "Orgs", "ListMembers", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Orgs.ListMembers")
	if err != nil {
		return
	}

	var target sourcegraph.OrgsServer = s.u

	res, err = target.ListMembers(ctx, param)
	return

}

type wrappedPeople struct {
	u sourcegraph.PeopleServer
	c *auth.Config
}

func (s wrappedPeople) Get(ctx context.Context, param *sourcegraph.PersonSpec) (res *sourcegraph.Person, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "People", "Get", param)
	defer func() {
		trace.After(ctx, "People", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "People.Get")
	if err != nil {
		return
	}

	var target sourcegraph.PeopleServer = s.u

	res, err = target.Get(ctx, param)
	return

}

type wrappedRegisteredClients struct {
	u sourcegraph.RegisteredClientsServer
	c *auth.Config
}

func (s wrappedRegisteredClients) Get(ctx context.Context, param *sourcegraph.RegisteredClientSpec) (res *sourcegraph.RegisteredClient, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "Get", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.Get")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsGet(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) GetCurrent(ctx context.Context, param *pbtypes.Void) (res *sourcegraph.RegisteredClient, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "GetCurrent", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "GetCurrent", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.GetCurrent")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsGetCurrent(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) Create(ctx context.Context, param *sourcegraph.RegisteredClient) (res *sourcegraph.RegisteredClient, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "Create", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.Create")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsCreate(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) Update(ctx context.Context, param *sourcegraph.RegisteredClient) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "Update", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "Update", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.Update")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsUpdate(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) Delete(ctx context.Context, param *sourcegraph.RegisteredClientSpec) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "Delete", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "Delete", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.Delete")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsDelete(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) List(ctx context.Context, param *sourcegraph.RegisteredClientListOptions) (res *sourcegraph.RegisteredClientList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "List", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.List")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsList(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) GetUserPermissions(ctx context.Context, param *sourcegraph.UserPermissionsOptions) (res *sourcegraph.UserPermissions, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "GetUserPermissions", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "GetUserPermissions", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.GetUserPermissions")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsGetUserPermissions(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) SetUserPermissions(ctx context.Context, param *sourcegraph.UserPermissions) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "SetUserPermissions", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "SetUserPermissions", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.SetUserPermissions")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsSetUserPermissions(ctx, param, s.u)
	return

}

func (s wrappedRegisteredClients) ListUserPermissions(ctx context.Context, param *sourcegraph.RegisteredClientSpec) (res *sourcegraph.UserPermissionsList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RegisteredClients", "ListUserPermissions", param)
	defer func() {
		trace.After(ctx, "RegisteredClients", "ListUserPermissions", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RegisteredClients.ListUserPermissions")
	if err != nil {
		return
	}

	res, err = federated.CustomRegisteredClientsListUserPermissions(ctx, param, s.u)
	return

}

type wrappedRepoBadges struct {
	u sourcegraph.RepoBadgesServer
	c *auth.Config
}

func (s wrappedRepoBadges) ListBadges(ctx context.Context, param *sourcegraph.RepoSpec) (res *sourcegraph.BadgeList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoBadges", "ListBadges", param)
	defer func() {
		trace.After(ctx, "RepoBadges", "ListBadges", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoBadges.ListBadges")
	if err != nil {
		return
	}

	var target sourcegraph.RepoBadgesServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoBadges(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListBadges(ctx, param)
	return

}

func (s wrappedRepoBadges) ListCounters(ctx context.Context, param *sourcegraph.RepoSpec) (res *sourcegraph.CounterList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoBadges", "ListCounters", param)
	defer func() {
		trace.After(ctx, "RepoBadges", "ListCounters", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoBadges.ListCounters")
	if err != nil {
		return
	}

	var target sourcegraph.RepoBadgesServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoBadges(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListCounters(ctx, param)
	return

}

func (s wrappedRepoBadges) RecordHit(ctx context.Context, param *sourcegraph.RepoSpec) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoBadges", "RecordHit", param)
	defer func() {
		trace.After(ctx, "RepoBadges", "RecordHit", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoBadges.RecordHit")
	if err != nil {
		return
	}

	var target sourcegraph.RepoBadgesServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoBadges(fedCtx)
		ctx = fedCtx
	}

	res, err = target.RecordHit(ctx, param)
	return

}

func (s wrappedRepoBadges) CountHits(ctx context.Context, param *sourcegraph.RepoBadgesCountHitsOp) (res *sourcegraph.RepoBadgesCountHitsResult, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoBadges", "CountHits", param)
	defer func() {
		trace.After(ctx, "RepoBadges", "CountHits", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoBadges.CountHits")
	if err != nil {
		return
	}

	var target sourcegraph.RepoBadgesServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoBadges(fedCtx)
		ctx = fedCtx
	}

	res, err = target.CountHits(ctx, param)
	return

}

type wrappedRepoStatuses struct {
	u sourcegraph.RepoStatusesServer
	c *auth.Config
}

func (s wrappedRepoStatuses) GetCombined(ctx context.Context, param *sourcegraph.RepoRevSpec) (res *sourcegraph.CombinedStatus, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoStatuses", "GetCombined", param)
	defer func() {
		trace.After(ctx, "RepoStatuses", "GetCombined", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoStatuses.GetCombined")
	if err != nil {
		return
	}

	var target sourcegraph.RepoStatusesServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoStatuses(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetCombined(ctx, param)
	return

}

func (s wrappedRepoStatuses) Create(ctx context.Context, param *sourcegraph.RepoStatusesCreateOp) (res *sourcegraph.RepoStatus, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoStatuses", "Create", param)
	defer func() {
		trace.After(ctx, "RepoStatuses", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoStatuses.Create")
	if err != nil {
		return
	}

	var target sourcegraph.RepoStatusesServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoStatuses(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Create(ctx, param)
	return

}

type wrappedRepoTree struct {
	u sourcegraph.RepoTreeServer
	c *auth.Config
}

func (s wrappedRepoTree) Get(ctx context.Context, param *sourcegraph.RepoTreeGetOp) (res *sourcegraph.TreeEntry, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoTree", "Get", param)
	defer func() {
		trace.After(ctx, "RepoTree", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoTree.Get")
	if err != nil {
		return
	}

	var target sourcegraph.RepoTreeServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Entry.RepoRev.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoTree(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedRepoTree) Search(ctx context.Context, param *sourcegraph.RepoTreeSearchOp) (res *sourcegraph.VCSSearchResultList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoTree", "Search", param)
	defer func() {
		trace.After(ctx, "RepoTree", "Search", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoTree.Search")
	if err != nil {
		return
	}

	var target sourcegraph.RepoTreeServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Rev.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoTree(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Search(ctx, param)
	return

}

func (s wrappedRepoTree) List(ctx context.Context, param *sourcegraph.RepoTreeListOp) (res *sourcegraph.RepoTreeListResult, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "RepoTree", "List", param)
	defer func() {
		trace.After(ctx, "RepoTree", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "RepoTree.List")
	if err != nil {
		return
	}

	var target sourcegraph.RepoTreeServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Rev.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.RepoTree(fedCtx)
		ctx = fedCtx
	}

	res, err = target.List(ctx, param)
	return

}

type wrappedRepos struct {
	u sourcegraph.ReposServer
	c *auth.Config
}

func (s wrappedRepos) Get(ctx context.Context, param *sourcegraph.RepoSpec) (res *sourcegraph.Repo, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "Get", param)
	defer func() {
		trace.After(ctx, "Repos", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.Get")
	if err != nil {
		return
	}

	res, err = federated.CustomReposGet(ctx, param, s.u)
	return

}

func (s wrappedRepos) List(ctx context.Context, param *sourcegraph.RepoListOptions) (res *sourcegraph.RepoList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "List", param)
	defer func() {
		trace.After(ctx, "Repos", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.List")
	if err != nil {
		return
	}

	res, err = federated.CustomReposList(ctx, param, s.u)
	return

}

func (s wrappedRepos) Create(ctx context.Context, param *sourcegraph.ReposCreateOp) (res *sourcegraph.Repo, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "Create", param)
	defer func() {
		trace.After(ctx, "Repos", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.Create")
	if err != nil {
		return
	}

	res, err = federated.CustomReposCreate(ctx, param, s.u)
	return

}

func (s wrappedRepos) Update(ctx context.Context, param *sourcegraph.ReposUpdateOp) (res *sourcegraph.Repo, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "Update", param)
	defer func() {
		trace.After(ctx, "Repos", "Update", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.Update")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Update(ctx, param)
	return

}

func (s wrappedRepos) Delete(ctx context.Context, param *sourcegraph.RepoSpec) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "Delete", param)
	defer func() {
		trace.After(ctx, "Repos", "Delete", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.Delete")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Delete(ctx, param)
	return

}

func (s wrappedRepos) GetReadme(ctx context.Context, param *sourcegraph.RepoRevSpec) (res *sourcegraph.Readme, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "GetReadme", param)
	defer func() {
		trace.After(ctx, "Repos", "GetReadme", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.GetReadme")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetReadme(ctx, param)
	return

}

func (s wrappedRepos) Enable(ctx context.Context, param *sourcegraph.RepoSpec) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "Enable", param)
	defer func() {
		trace.After(ctx, "Repos", "Enable", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.Enable")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Enable(ctx, param)
	return

}

func (s wrappedRepos) Disable(ctx context.Context, param *sourcegraph.RepoSpec) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "Disable", param)
	defer func() {
		trace.After(ctx, "Repos", "Disable", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.Disable")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Disable(ctx, param)
	return

}

func (s wrappedRepos) GetConfig(ctx context.Context, param *sourcegraph.RepoSpec) (res *sourcegraph.RepoConfig, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "GetConfig", param)
	defer func() {
		trace.After(ctx, "Repos", "GetConfig", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.GetConfig")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetConfig(ctx, param)
	return

}

func (s wrappedRepos) GetCommit(ctx context.Context, param *sourcegraph.RepoRevSpec) (res *vcs.Commit, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "GetCommit", param)
	defer func() {
		trace.After(ctx, "Repos", "GetCommit", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.GetCommit")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.GetCommit(ctx, param)
	return

}

func (s wrappedRepos) ListCommits(ctx context.Context, param *sourcegraph.ReposListCommitsOp) (res *sourcegraph.CommitList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "ListCommits", param)
	defer func() {
		trace.After(ctx, "Repos", "ListCommits", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.ListCommits")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListCommits(ctx, param)
	return

}

func (s wrappedRepos) ListBranches(ctx context.Context, param *sourcegraph.ReposListBranchesOp) (res *sourcegraph.BranchList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "ListBranches", param)
	defer func() {
		trace.After(ctx, "Repos", "ListBranches", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.ListBranches")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListBranches(ctx, param)
	return

}

func (s wrappedRepos) ListTags(ctx context.Context, param *sourcegraph.ReposListTagsOp) (res *sourcegraph.TagList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "ListTags", param)
	defer func() {
		trace.After(ctx, "Repos", "ListTags", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.ListTags")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListTags(ctx, param)
	return

}

func (s wrappedRepos) ListCommitters(ctx context.Context, param *sourcegraph.ReposListCommittersOp) (res *sourcegraph.CommitterList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Repos", "ListCommitters", param)
	defer func() {
		trace.After(ctx, "Repos", "ListCommitters", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Repos.ListCommitters")
	if err != nil {
		return
	}

	var target sourcegraph.ReposServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.Repo.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Repos(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListCommitters(ctx, param)
	return

}

type wrappedSearch struct {
	u sourcegraph.SearchServer
	c *auth.Config
}

func (s wrappedSearch) Search(ctx context.Context, param *sourcegraph.SearchOptions) (res *sourcegraph.SearchResults, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Search", "Search", param)
	defer func() {
		trace.After(ctx, "Search", "Search", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Search.Search")
	if err != nil {
		return
	}

	var target sourcegraph.SearchServer = s.u

	res, err = target.Search(ctx, param)
	return

}

func (s wrappedSearch) SearchTokens(ctx context.Context, param *sourcegraph.TokenSearchOptions) (res *sourcegraph.DefList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Search", "SearchTokens", param)
	defer func() {
		trace.After(ctx, "Search", "SearchTokens", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Search.SearchTokens")
	if err != nil {
		return
	}

	var target sourcegraph.SearchServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.RepoRev.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Search(fedCtx)
		ctx = fedCtx
	}

	res, err = target.SearchTokens(ctx, param)
	return

}

func (s wrappedSearch) SearchText(ctx context.Context, param *sourcegraph.TextSearchOptions) (res *sourcegraph.VCSSearchResultList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Search", "SearchText", param)
	defer func() {
		trace.After(ctx, "Search", "SearchText", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Search.SearchText")
	if err != nil {
		return
	}

	var target sourcegraph.SearchServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.RepoRev.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Search(fedCtx)
		ctx = fedCtx
	}

	res, err = target.SearchText(ctx, param)
	return

}

func (s wrappedSearch) Complete(ctx context.Context, param *sourcegraph.RawQuery) (res *sourcegraph.Completions, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Search", "Complete", param)
	defer func() {
		trace.After(ctx, "Search", "Complete", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Search.Complete")
	if err != nil {
		return
	}

	var target sourcegraph.SearchServer = s.u

	res, err = target.Complete(ctx, param)
	return

}

func (s wrappedSearch) Suggest(ctx context.Context, param *sourcegraph.RawQuery) (res *sourcegraph.SuggestionList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Search", "Suggest", param)
	defer func() {
		trace.After(ctx, "Search", "Suggest", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Search.Suggest")
	if err != nil {
		return
	}

	var target sourcegraph.SearchServer = s.u

	res, err = target.Suggest(ctx, param)
	return

}

type wrappedStorage struct {
	u sourcegraph.StorageServer
	c *auth.Config
}

func (s wrappedStorage) Create(ctx context.Context, param *sourcegraph.StorageName) (res *sourcegraph.StorageError, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "Create", param)
	defer func() {
		trace.After(ctx, "Storage", "Create", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.Create")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.Create(ctx, param)
	return

}

func (s wrappedStorage) RemoveAll(ctx context.Context, param *sourcegraph.StorageName) (res *sourcegraph.StorageError, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "RemoveAll", param)
	defer func() {
		trace.After(ctx, "Storage", "RemoveAll", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.RemoveAll")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.RemoveAll(ctx, param)
	return

}

func (s wrappedStorage) Read(ctx context.Context, param *sourcegraph.StorageReadOp) (res *sourcegraph.StorageRead, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "Read", param)
	defer func() {
		trace.After(ctx, "Storage", "Read", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.Read")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.Read(ctx, param)
	return

}

func (s wrappedStorage) Write(ctx context.Context, param *sourcegraph.StorageWriteOp) (res *sourcegraph.StorageWrite, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "Write", param)
	defer func() {
		trace.After(ctx, "Storage", "Write", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.Write")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.Write(ctx, param)
	return

}

func (s wrappedStorage) Stat(ctx context.Context, param *sourcegraph.StorageName) (res *sourcegraph.StorageStat, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "Stat", param)
	defer func() {
		trace.After(ctx, "Storage", "Stat", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.Stat")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.Stat(ctx, param)
	return

}

func (s wrappedStorage) ReadDir(ctx context.Context, param *sourcegraph.StorageName) (res *sourcegraph.StorageReadDir, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "ReadDir", param)
	defer func() {
		trace.After(ctx, "Storage", "ReadDir", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.ReadDir")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.ReadDir(ctx, param)
	return

}

func (s wrappedStorage) Close(ctx context.Context, param *sourcegraph.StorageName) (res *sourcegraph.StorageError, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Storage", "Close", param)
	defer func() {
		trace.After(ctx, "Storage", "Close", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Storage.Close")
	if err != nil {
		return
	}

	var target sourcegraph.StorageServer = s.u

	res, err = target.Close(ctx, param)
	return

}

type wrappedUnits struct {
	u sourcegraph.UnitsServer
	c *auth.Config
}

func (s wrappedUnits) Get(ctx context.Context, param *sourcegraph.UnitSpec) (res *unit.RepoSourceUnit, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Units", "Get", param)
	defer func() {
		trace.After(ctx, "Units", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Units.Get")
	if err != nil {
		return
	}

	var target sourcegraph.UnitsServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.RepoContext(ctx, &param.URI)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Units(fedCtx)
		ctx = fedCtx
	}

	res, err = target.Get(ctx, param)
	return

}

func (s wrappedUnits) List(ctx context.Context, param *sourcegraph.UnitListOptions) (res *sourcegraph.RepoSourceUnitList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Units", "List", param)
	defer func() {
		trace.After(ctx, "Units", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Units.List")
	if err != nil {
		return
	}

	var target sourcegraph.UnitsServer = s.u

	res, err = target.List(ctx, param)
	return

}

type wrappedUserKeys struct {
	u sourcegraph.UserKeysServer
	c *auth.Config
}

func (s wrappedUserKeys) AddKey(ctx context.Context, param *sourcegraph.SSHPublicKey) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "UserKeys", "AddKey", param)
	defer func() {
		trace.After(ctx, "UserKeys", "AddKey", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "UserKeys.AddKey")
	if err != nil {
		return
	}

	var target sourcegraph.UserKeysServer = s.u

	res, err = target.AddKey(ctx, param)
	return

}

func (s wrappedUserKeys) LookupUser(ctx context.Context, param *sourcegraph.SSHPublicKey) (res *sourcegraph.UserSpec, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "UserKeys", "LookupUser", param)
	defer func() {
		trace.After(ctx, "UserKeys", "LookupUser", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "UserKeys.LookupUser")
	if err != nil {
		return
	}

	var target sourcegraph.UserKeysServer = s.u

	res, err = target.LookupUser(ctx, param)
	return

}

func (s wrappedUserKeys) DeleteKey(ctx context.Context, param *pbtypes.Void) (res *pbtypes.Void, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "UserKeys", "DeleteKey", param)
	defer func() {
		trace.After(ctx, "UserKeys", "DeleteKey", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "UserKeys.DeleteKey")
	if err != nil {
		return
	}

	var target sourcegraph.UserKeysServer = s.u

	res, err = target.DeleteKey(ctx, param)
	return

}

type wrappedUsers struct {
	u sourcegraph.UsersServer
	c *auth.Config
}

func (s wrappedUsers) Get(ctx context.Context, param *sourcegraph.UserSpec) (res *sourcegraph.User, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Users", "Get", param)
	defer func() {
		trace.After(ctx, "Users", "Get", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Users.Get")
	if err != nil {
		return
	}

	res, err = federated.CustomUsersGet(ctx, param, s.u)
	return

}

func (s wrappedUsers) GetWithEmail(ctx context.Context, param *sourcegraph.EmailAddr) (res *sourcegraph.User, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Users", "GetWithEmail", param)
	defer func() {
		trace.After(ctx, "Users", "GetWithEmail", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Users.GetWithEmail")
	if err != nil {
		return
	}

	var target sourcegraph.UsersServer = s.u

	res, err = target.GetWithEmail(ctx, param)
	return

}

func (s wrappedUsers) ListEmails(ctx context.Context, param *sourcegraph.UserSpec) (res *sourcegraph.EmailAddrList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Users", "ListEmails", param)
	defer func() {
		trace.After(ctx, "Users", "ListEmails", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Users.ListEmails")
	if err != nil {
		return
	}

	var target sourcegraph.UsersServer = s.u

	var fedCtx context.Context
	fedCtx, err = federated.UserContext(ctx, *param)
	if err != nil {
		return
	}
	if fedCtx != nil {
		target = svc.Users(fedCtx)
		ctx = fedCtx
	}

	res, err = target.ListEmails(ctx, param)
	return

}

func (s wrappedUsers) List(ctx context.Context, param *sourcegraph.UsersListOptions) (res *sourcegraph.UserList, err error) {
	start := time.Now()
	ctx = trace.Before(ctx, "Users", "List", param)
	defer func() {
		trace.After(ctx, "Users", "List", param, err, time.Since(start))
	}()

	err = s.c.Authenticate(ctx, "Users.List")
	if err != nil {
		return
	}

	var target sourcegraph.UsersServer = s.u

	res, err = target.List(ctx, param)
	return

}
