// Code generated by vfsgen; DO NOT EDIT

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem given to vfsgen as input.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := _vfsgen_fs{
		"/": &_vfsgen_dirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2016-01-12T17:01:13Z"),
		},
		"/home.html": &_vfsgen_compressedFileInfo{
			name:              "home.html",
			modTime:           mustUnmarshalTextTime("2015-12-18T16:42:29Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x4d\x73\x9b\x3c\x10\xbe\xf3\x2b\xf4\xf2\xa6\x33\xed\x01\xdc\xc4\x3d\xd9\x98\x43\x9b\xc9\x34\xd3\x34\xd3\xe6\xa3\xd7\x8e\x8c\xe4\xa0\x46\x48\x0c\x12\x76\x5c\x86\xff\xde\x95\x84\x31\x89\x29\x63\x4f\x8f\x71\x0e\x21\x68\x3f\x9e\xdd\x47\x0f\xd9\x8d\x94\x5e\x73\x1a\x7b\x38\xc4\x22\x49\x65\x81\x2a\x0f\xc1\x0f\x61\x2a\xe7\x78\x3d\x41\x73\x2e\x93\xc7\xa9\x3d\xcb\xa5\x62\x9a\x49\x31\x41\x05\xe5\x58\xb3\x25\x75\xe7\x5a\xe6\x13\xf4\x3e\x7f\x72\x6f\x4b\xa6\xd8\x9c\x71\xa6\x21\x38\x65\x84\x50\x31\xf5\x6a\xcf\x53\x39\x16\xe1\xaf\x32\xcb\xb5\x24\x74\x61\x51\x16\x52\xe8\x40\xb1\xdf\x74\x82\x4e\x3f\xb8\xf0\x16\x96\x09\xce\x04\x0d\x5a\xf4\x7e\x6c\x8b\x1c\x8c\x4d\x6c\xed\x45\xa3\xa6\x15\x2f\x4a\x4f\xe3\xaa\x0a\x2f\x4a\xce\xbf\x61\x9d\xd6\x75\x34\x82\x13\x73\x7e\x16\x5f\x0a\x42\x9f\xe0\xfd\x2c\x86\xf8\xe8\xbf\x20\x40\x9f\xa4\x50\x1a\x0b\xad\x90\xb5\xa1\x20\x30\xa6\xaa\x5a\x31\x9d\xa2\x47\x26\x88\x42\x7e\x62\x7c\x7c\x74\x12\x9e\xd3\x85\x82\xc7\xfd\xcd\x55\xe8\x52\xdb\x9e\xa3\x74\x1c\x47\x18\xa5\x05\x5d\xcc\xfc\xff\x9d\x73\xdc\xe6\x8d\x46\x38\x06\xc4\x71\xec\x7c\x09\x5b\xba\xbf\x0c\x48\x81\xc5\x03\x45\x61\x93\xc7\xda\x0d\x53\xc8\xb6\x32\xf3\x73\x4c\x08\x13\x0f\x01\xa7\x0b\x3d\x41\x63\x9a\x4d\x51\xc6\x44\xb0\x62\x44\xa7\xf0\x3e\x7e\x33\xfd\x0b\x65\x7e\xa7\x1e\xa0\x02\xca\xfe\x42\xd7\x4d\xc9\xbe\x25\x27\xd3\xb7\xba\x80\xdc\xaa\x31\xae\x64\x41\xea\x1a\x3d\x37\x5d\xe3\x8c\x86\xb7\x89\xcc\xe9\xf7\x12\x73\xb6\x60\x94\x18\x36\x4d\x3f\xa6\xcc\x6d\x1f\x54\x90\x0d\x17\xa3\xa6\xc1\xcd\xe1\x86\xe7\x1f\xb8\x60\x78\xce\xe9\x10\xcf\x4b\x5c\xec\xcb\x32\xb8\x2a\x3f\x6e\x93\x1e\x49\xb6\x24\xdf\xad\xf3\x41\x82\x35\xd8\xf7\x65\xd8\xfa\xc6\x36\xe3\x91\x5d\xcb\xee\x45\x29\x12\xf3\x5f\x68\x88\xe1\x05\xf8\xec\xcb\xb0\xf5\x8d\xdb\xac\x47\x96\x2d\xcb\xb7\xe5\x9c\xb0\x82\x26\x5a\x16\xeb\x3e\xa2\x43\x70\x38\x67\x85\xea\x50\xda\x09\x61\x46\xad\x2d\x87\x25\x1f\xa4\x90\xb3\x6d\xfb\x55\x75\x12\x7e\xc4\x8a\xde\xdf\x5c\xd6\xf5\x08\xda\x6b\x08\xd8\xf4\x01\xbe\xbd\x5d\x38\x88\xb6\x89\x17\x33\xc5\x54\x7e\xc0\x2c\x81\x11\x85\x18\x99\x35\x4e\xbb\x43\xc5\x5d\x7a\xc2\xb1\x52\x33\x5f\x82\x6c\xe0\x1c\x35\xcf\x00\xae\xf5\xd1\xdf\x30\x6e\x8a\x46\x9d\x19\xe4\x26\xde\x4b\x16\x00\xa0\x49\xe6\xc6\xbf\x6f\xd1\x77\x85\x60\xb2\xf5\x08\xb8\xc7\xf1\xb0\x02\xff\x4d\x60\xe8\x19\x5a\xbb\x5d\xf8\xf1\xdb\xce\xad\x26\x98\x73\x47\xf3\x9d\x04\x00\xd3\xba\x8f\x34\x2e\x1e\xa8\x9e\xf9\x3f\xe7\x1c\x9b\x9a\x4c\x2c\xac\x13\x08\xa2\x99\xb0\x9b\x86\x29\xef\x5d\x5b\x6a\xf7\xa3\xdc\xe0\xad\x28\x24\x36\xbf\x02\x95\xf9\x5b\x6d\x30\x80\x00\x9c\xf0\x5c\x26\xaa\xa3\xb5\xaa\x4a\x75\xc6\x91\x39\xfe\x7c\xf7\xf5\xaa\xb5\x80\x70\xb8\xa2\x1d\xc7\x6b\xa8\x42\x26\x65\x46\x85\xc6\xa6\x10\xd8\x93\x4a\x41\xc2\x7d\xbe\xa0\x56\x84\xde\x8b\x89\xbb\xab\xc2\x81\x49\xdb\xaf\x09\x13\xb0\x91\x81\x59\xa4\x9e\x4d\xe2\x83\xef\xbd\x33\xb7\x8f\xc2\x7c\x75\xc2\x74\x5b\xca\xae\x28\x87\xb6\x93\x7e\x41\xb8\x1d\xa5\x57\x96\x8d\xe9\xb0\x6b\x6f\xb6\x9d\xa3\x26\x5f\x9d\x26\xb7\xbb\xdd\xae\x2e\x87\x76\xba\x7e\x51\xb8\xcd\xae\x57\x97\x8d\xe9\xb0\xab\xef\xec\x88\x47\x6d\xbe\x1e\x6d\xfe\x09\x00\x00\xff\xff\x04\x84\x7f\xb9\x9e\x11\x00\x00"),
			uncompressedSize:  4510,
		},
	}

	fs["/"].(*_vfsgen_dirInfo).entries = []os.FileInfo{
		fs["/home.html"].(os.FileInfo),
	}

	return fs
}()

type _vfsgen_fs map[string]interface{}

func (fs _vfsgen_fs) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *_vfsgen_compressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &_vfsgen_compressedFile{
			_vfsgen_compressedFileInfo: f,
			gr: gr,
		}, nil
	case *_vfsgen_dirInfo:
		return &_vfsgen_dir{
			_vfsgen_dirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// _vfsgen_compressedFileInfo is a static definition of a gzip compressed file.
type _vfsgen_compressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *_vfsgen_compressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *_vfsgen_compressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *_vfsgen_compressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *_vfsgen_compressedFileInfo) Name() string       { return f.name }
func (f *_vfsgen_compressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *_vfsgen_compressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *_vfsgen_compressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *_vfsgen_compressedFileInfo) IsDir() bool        { return false }
func (f *_vfsgen_compressedFileInfo) Sys() interface{}   { return nil }

// _vfsgen_compressedFile is an opened compressedFile instance.
type _vfsgen_compressedFile struct {
	*_vfsgen_compressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *_vfsgen_compressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f._vfsgen_compressedFileInfo.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.ReadFull(f.gr, make([]byte, f.seekPos-f.grPos))
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *_vfsgen_compressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case os.SEEK_SET:
		f.seekPos = 0 + offset
	case os.SEEK_CUR:
		f.seekPos += offset
	case os.SEEK_END:
		f.seekPos = f._vfsgen_compressedFileInfo.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *_vfsgen_compressedFile) Close() error {
	return f.gr.Close()
}

// _vfsgen_dirInfo is a static definition of a directory.
type _vfsgen_dirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *_vfsgen_dirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *_vfsgen_dirInfo) Close() error               { return nil }
func (d *_vfsgen_dirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *_vfsgen_dirInfo) Name() string       { return d.name }
func (d *_vfsgen_dirInfo) Size() int64        { return 0 }
func (d *_vfsgen_dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *_vfsgen_dirInfo) ModTime() time.Time { return d.modTime }
func (d *_vfsgen_dirInfo) IsDir() bool        { return true }
func (d *_vfsgen_dirInfo) Sys() interface{}   { return nil }

// _vfsgen_dir is an opened dir instance.
type _vfsgen_dir struct {
	*_vfsgen_dirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *_vfsgen_dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == os.SEEK_SET {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d._vfsgen_dirInfo.name)
}

func (d *_vfsgen_dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d._vfsgen_dirInfo.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d._vfsgen_dirInfo.entries)-d.pos {
		count = len(d._vfsgen_dirInfo.entries) - d.pos
	}
	e := d._vfsgen_dirInfo.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
