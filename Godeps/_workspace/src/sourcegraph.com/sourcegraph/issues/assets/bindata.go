// Code generated by go-bindata.
// sources:
// assets/bindata.go
// assets/issue.html
// assets/main.html
// assets/reply.html
// assets/reply.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func assetsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsBindataGo,
		"assets/bindata.go",
	)
}

func assetsBindataGo() (*asset, error) {
	bytes, err := assetsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1443407647, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsIssueHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xcf\x6e\xd4\x30\x10\xc6\xcf\x9b\xa7\xb0\x2c\x0e\x70\x49\x5a\xb5\x07\xb4\x4a\x82\xc4\x02\x52\xb8\x80\x9a\xed\x19\xb9\xc9\x2c\x31\x24\x76\xe4\x99\x84\xad\x22\xbf\x3b\xe3\x38\x6d\x57\x70\x80\x9c\xe2\x6f\xfe\xfd\xe6\x9b\xbc\xbb\x2e\x13\xc1\xdf\xb2\xa4\x15\xe2\x04\xe9\x51\x53\x0f\xde\x27\x79\x16\x42\xcb\xf2\xea\xbd\x42\xb8\x77\x5a\xec\x0b\x91\xae\xff\x77\x15\x87\x39\xd0\xd0\x79\x15\x0f\x74\x0e\xf9\xd8\x38\x3d\x92\x40\xd7\x14\xf2\xa5\xcc\xfb\x4c\x21\x02\x61\xe6\x60\xec\x1f\xd3\x1f\x28\xcb\x3c\x8b\xb9\x65\x92\x77\xb7\x65\x4d\x8a\x26\xdc\xbf\x10\x44\xc1\x7b\x26\xb8\x0d\x04\x4e\x99\xef\x20\xb6\xe0\xc7\x19\x0c\x71\x70\x83\x7e\xed\xc0\xb4\xe0\xc4\x0a\x93\xbe\x59\xc1\x58\x09\x3c\xad\x9e\xe3\x6a\x79\x77\x53\x7e\xb6\xda\x08\xea\x40\x34\xd6\xcc\xe0\x50\x91\xb6\x66\xcf\x13\x6e\xb6\x9c\x93\x75\x83\x50\x4d\x90\xff\xc0\x7f\xe6\xba\xaf\x3e\x78\x2f\xc5\x00\xd4\xd9\xb6\x90\x5f\xbf\xd4\x47\x59\x26\xbb\xdd\x2e\xd7\x66\x9c\x48\xd0\xe3\x08\x85\xec\x74\xdb\x82\x91\xc2\xa8\x81\x5f\x0d\xba\xd3\x37\xb2\x3f\x83\x32\xab\x7e\x82\xd0\x3c\x3d\xd4\x77\x9f\x8e\x41\xe4\x7e\x71\xfe\xca\x40\x70\x26\xe5\x40\x6d\xb5\xab\x61\x52\x38\xfb\x0b\x0b\x79\x7d\x25\x99\xbd\xe7\xbf\xb7\x57\xc1\xc1\xa7\xdc\x8b\xf2\x07\x77\xf1\xb8\x44\xc2\xe9\x61\xd0\xf4\x0c\x50\xc7\xe7\xb6\x78\x16\x36\xe7\x4b\x64\xab\x5f\x6c\x9f\x3e\xf1\x49\xb9\x33\x59\x17\x6c\x64\x87\x2a\x64\xeb\x34\x0a\x1d\x6c\x10\x0e\xd0\xf6\x33\xb4\xef\xa2\x7b\xff\xed\x5c\xd6\xf4\x16\xe1\x2f\xff\xfe\x45\x7b\x08\x55\x71\xb4\x0c\x98\x11\xf7\xe9\xca\xbf\x03\x00\x00\xff\xff\xad\xa5\x22\x3e\xc0\x02\x00\x00")

func assetsIssueHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIssueHtml,
		"assets/issue.html",
	)
}

func assetsIssueHtml() (*asset, error) {
	bytes, err := assetsIssueHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/issue.html", size: 704, mode: os.FileMode(436), modTime: time.Unix(1443407518, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\xdf\x6b\xdb\x30\x10\x7e\x5e\xfe\x8a\x43\xec\x75\x76\xb7\x0e\x36\x82\x6c\xd8\x52\x06\x79\x59\x47\x9b\x3e\x0f\xd9\xbe\xd4\x62\x8a\x64\xa4\x73\xbb\x60\xbc\xbf\x7d\x27\xc7\x8e\x93\x36\x30\x98\x9f\xee\x97\xbe\xbb\xef\xbb\x73\xd7\xc1\xdb\xaf\x2a\xe0\xc3\xdd\x1a\x96\x19\x24\x93\xdd\xf7\x0b\x59\x7f\xc8\x6f\x1b\xb4\xb0\x0e\xa1\xc5\x20\x53\xf6\x17\xb2\xd2\x4f\x50\x1a\x15\x42\x26\x1a\x65\xd1\x88\x7c\x01\xfc\x49\x52\x85\xc1\x29\x33\x38\x63\xe6\x90\x2d\x5c\xb5\x9f\xfd\xf8\x71\x67\xaf\xec\x23\x42\x12\x9b\x24\x87\x26\xb1\xef\x69\x91\x24\x7f\xfe\xea\x10\xac\x5e\x07\x87\x84\x82\xda\xe3\x36\x13\x5d\x37\x91\xea\xfb\xb4\xeb\x92\x87\xf5\x4d\xdf\x8b\x7c\xb2\x96\xdc\x3c\xd9\x68\x32\xd8\xf7\x32\x55\xff\x00\x4b\xff\x70\xf5\x97\x96\x6a\xe7\x93\xef\x6a\x87\x3c\xa3\x38\x4a\xd0\x1a\xf3\xce\xeb\xc7\x9a\x06\xf4\xf3\xaa\x8b\xd0\x32\x7d\x39\x3d\x47\xfc\x2b\x69\xd0\x56\xa7\x5a\x70\xcd\xac\x20\x3b\x51\x5f\x5e\x46\xca\xdb\xc8\x87\x45\xc1\xca\xa3\x22\x04\x65\x41\x47\x25\x97\x30\xee\x6b\xeb\xfc\x0e\x54\x49\xda\xd9\x17\xba\x58\x7c\x16\xb0\x43\x9e\xb8\xca\xc4\x8f\xdb\xfb\x0d\x2f\xec\x8d\xd4\xb6\x69\x09\x68\xdf\x60\x26\x6a\x5d\x55\x68\x05\x58\xe6\x93\x89\x32\xf8\xed\x4f\x72\xbf\x62\xe4\x49\x99\x16\x23\x5e\xb2\xba\xbf\xfb\xb6\x89\xc1\x28\xf0\x30\xde\x20\x2c\xf7\x27\xfc\x4d\x8a\xa7\x1a\x9f\x53\x0c\x0b\xf0\xee\x99\x75\x7b\xcf\x0a\x3a\xc3\xc6\xa7\x8f\x22\x67\x3e\x63\xe9\xc8\xaf\xc9\x6f\x30\x94\x5e\x17\x08\x7b\xd7\xfa\x91\x91\x4c\x9b\xe9\xd6\xce\x91\x4b\x67\x09\x2d\x1d\xb1\xaf\x26\xf0\xcf\x57\x17\xc0\x8b\x51\xec\x33\xa6\xa1\x2d\x76\x9a\x8e\xbc\x46\x37\x2a\x1c\xf5\x8b\x12\x5f\xe7\x2b\xe3\x02\x56\xf3\xdf\x70\x9d\x2f\xe6\x1b\x3e\x24\x4f\xae\x98\x49\xfc\xef\x39\x0e\x44\xe7\x1b\xf8\x1b\x00\x00\xff\xff\xd7\x02\xa5\x47\xa3\x03\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 931, mode: os.FileMode(436), modTime: time.Unix(1443407518, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsReplyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x50\xcb\x4e\xc4\x30\x0c\xbc\xf3\x15\x96\x39\x77\x7b\x87\xb4\x12\x8f\x0b\x1f\xc0\x07\x98\xc6\xd9\x5a\x84\xb4\x72\x53\xa4\xaa\xca\xbf\x13\xaa\xb0\xdd\x2d\x3e\x24\x8a\x3d\x99\xf1\x8c\xb1\xf2\x0d\x9d\xa7\x69\x6a\x70\xa4\xc0\x1e\xb6\xb3\xb2\xec\x68\xf6\x11\xdb\x3b\xc8\xf5\x0f\x55\xf5\x4c\x56\xc2\xb9\xcc\x7f\x6b\x5d\x4f\x4f\x73\xec\x07\x4d\xe9\xd2\x33\x04\x81\xbe\xb8\xc1\x3c\x7c\x7f\x7b\x4d\x09\xa1\x57\x76\x0d\xde\x5f\x1a\x3b\xc1\xf6\x41\xfe\x64\x1c\x81\xa3\xca\x4b\xf8\xc4\xd6\xd4\xb2\xc3\x4c\x4d\xd7\xa2\xe2\xe0\xf4\xa2\x4c\xf1\x56\xf8\xc0\x33\x72\xe8\x24\x7b\x9b\xbd\xaf\x54\xce\x7d\x04\xb6\x12\x11\xa6\xb8\xf8\xbc\x5e\x37\xeb\x34\xe8\x03\x8c\x83\x84\xc8\xfa\x78\x90\x5c\x57\x0e\xb6\xb0\x9b\x3a\x67\x71\x95\x8a\xd8\x06\x95\x47\xbf\xec\x16\x6f\x82\xfa\x18\xec\x02\x1b\x00\xdb\x0c\x79\xce\xcf\x94\x0a\x49\xb9\x7e\x02\x00\x00\xff\xff\x32\xf3\xb1\x8e\x84\x01\x00\x00")

func assetsReplyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReplyHtml,
		"assets/reply.html",
	)
}

func assetsReplyHtml() (*asset, error) {
	bytes, err := assetsReplyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reply.html", size: 388, mode: os.FileMode(436), modTime: time.Unix(1443407518, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsReplyJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4f\x4f\xe3\x3e\x10\x3d\x37\x9f\xc2\xf2\xc5\xa9\x02\x29\xdc\x7e\x52\x1b\x0e\xfc\x76\x25\x56\x02\x16\x41\x0f\x2b\x21\xb4\x32\xf1\x40\x2c\x12\x3b\xf8\x0f\xd9\x6a\xc5\x77\xdf\x71\x9c\x94\x36\x94\x4b\x55\xcf\xcc\x7b\x7e\x33\xf3\xe2\x4e\x2a\xa1\xbb\x5c\xab\x5a\x73\x41\x0a\xf2\xe4\x55\xe9\xa4\x56\xe9\x9c\xfc\x4d\x08\x69\x41\x95\xb2\xb6\x98\x10\x86\x77\x37\xf1\x94\xce\x97\xc9\x7b\x92\x8c\xa5\x04\x84\x74\xa9\x81\xb6\xde\x5c\xfb\x26\xe2\x0c\x38\x6f\xd4\x3e\xdb\x6c\xf6\xc6\x0d\xa9\x80\x8b\xef\x35\x34\x81\x52\x97\xbe\x01\xe5\xf2\x57\x0f\x66\x73\x07\x35\x94\x4e\x9b\x94\x86\x92\x7b\xc1\x1d\x3f\x2e\xad\x79\x3a\x76\xfa\x05\xd4\x03\xc5\x4b\x23\x43\x08\xae\x43\x0c\x29\x46\xb6\x3c\x94\x5b\x70\xf9\x36\xb9\x4c\x50\x06\x21\x32\x34\xc5\x7a\x71\x2c\x1b\x35\x2e\xfb\x54\x7f\xda\x95\xf1\x0c\x2e\x70\xe1\xdf\xf3\xcd\x0f\x91\x4a\x31\x1f\x0b\x95\x00\x03\xe2\x76\x00\xf4\xc0\x5c\x2a\x05\xe6\x62\x7d\x75\x19\x8b\x3c\x26\x86\x61\xd6\xba\xe4\xa1\xeb\xbc\xe5\xae\x52\xbc\x81\x8c\x2d\x3e\x5f\xfe\x8a\x00\x05\x1d\xf9\x75\x75\x79\xe1\x5c\x7b\x0b\x38\x05\xeb\xd2\xed\x9d\xaf\x5f\x2e\xa5\xcf\xf3\x0e\x13\xae\x92\x36\x37\x60\x5b\xad\x2c\xac\xe1\x8f\x1b\xb2\x64\xaa\x31\x0c\x61\xf5\xa4\x4d\x43\x78\xcf\x54\x50\x96\x79\x94\x15\x56\x47\x49\x03\xae\xd2\xa2\xa0\x37\x3f\xef\xd6\xf4\x8c\xe1\x9c\x67\xb3\x0c\x01\x52\xb5\xde\x11\xb7\x69\xa1\xa0\x95\x14\x02\x14\x25\xa1\x9f\x82\x86\x31\xff\xee\x17\x43\xc9\x1b\xaf\x3d\x04\xc2\xed\xec\x33\x16\x58\x46\x29\x81\xc9\xa1\x36\x6e\x80\x0f\xf0\x5e\x1d\x25\x46\x77\xb6\xa0\xa7\x27\x94\x94\xba\xb6\xc5\x7f\x27\x08\xcb\xb0\xb3\x8c\xad\x16\x23\x62\x42\xf4\x68\x26\x81\x5d\x8d\xd6\x3f\x36\xa1\x9f\x41\xd1\x5d\x3c\x4e\x19\xbc\x73\x68\xda\x88\x88\x07\x8a\x36\x29\xa8\x90\xb6\xe4\x46\x7c\x6c\x2a\xb4\xf1\x2d\x06\x57\x8b\x58\x39\xe1\x5a\x84\x91\x9e\xb1\xe5\x10\x1c\x18\xce\xe3\x0d\x5f\x3b\x8b\x7d\xba\x6a\x7e\x90\x02\x1d\x50\xd6\xb2\x7c\x39\x6c\x81\x43\x4b\xde\xb3\xea\xc8\xf9\x9e\x7c\xfc\x46\xdf\x84\xd5\xe3\x3f\xb6\xe3\x35\xfc\xd2\x53\x86\x3a\xd9\x51\xa8\x39\x22\xce\x78\xd8\xf1\xa2\x45\xe2\xe8\xcd\xf7\xbd\x6f\x7f\xef\x59\x98\x3e\x19\x9f\xdb\xb7\xe7\x9b\xff\x6b\x6e\xed\x35\xda\x20\x65\xc1\x7d\xac\x27\xc5\x39\x92\x54\x22\xe6\x64\x49\x24\x59\x8d\x24\x79\x0d\xea\xd9\x55\x18\xcb\xb2\xb1\xf1\x16\xab\x86\xf4\xbd\x7c\x88\x0a\xdb\x9d\x49\xf5\xaf\x91\xcc\x4e\xb7\x62\xff\x05\x00\x00\xff\xff\x41\x13\x24\x73\xe3\x04\x00\x00")

func assetsReplyJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsReplyJs,
		"assets/reply.js",
	)
}

func assetsReplyJs() (*asset, error) {
	bytes, err := assetsReplyJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/reply.js", size: 1251, mode: os.FileMode(436), modTime: time.Unix(1443407518, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/bindata.go": assetsBindataGo,
	"assets/issue.html": assetsIssueHtml,
	"assets/main.html": assetsMainHtml,
	"assets/reply.html": assetsReplyHtml,
	"assets/reply.js": assetsReplyJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{assetsBindataGo, map[string]*bintree{
		}},
		"issue.html": &bintree{assetsIssueHtml, map[string]*bintree{
		}},
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{
		}},
		"reply.html": &bintree{assetsReplyHtml, map[string]*bintree{
		}},
		"reply.js": &bintree{assetsReplyJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

