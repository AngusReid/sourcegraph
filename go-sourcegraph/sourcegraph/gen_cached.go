// +build ignore

package main

import (
	"text/template"

	"src.sourcegraph.com/sourcegraph/gen"
)

func main() {
	svcs := []string{
		"sourcegraph.pb.go",
	}
	gen.Generate("cached_grpc.pb.go", tmpl, svcs, nil, "sourcegraph")
}

var tmpl = template.Must(template.New("").Delims("<<<", ">>>").Parse(`// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_cached.go
//
// Called via:
//
//   go generate
//

package sourcegraph

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"src.sourcegraph.com/sourcegraph/pkg/vcs"
	"sourcegraph.com/sourcegraph/grpccache"
	"sourcegraph.com/sourcegraph/srclib/unit"
	"sourcegraph.com/sqs/pbtypes"
)

<<<range .>>>
  type Cached<<<.Name>>>Client struct {
  	<<<.Name>>>Client
  	Cache *grpccache.Cache
  }

  <<<$service := .>>>
	<<<range .Methods>>>
    func (s *Cached<<<$service.Name>>>Client) <<<.Name>>>(ctx context.Context, in *<<<.ParamType>>>, opts ...grpc.CallOption) (*<<<.ResultType>>>, error) {
    	if s.Cache != nil {
    		var cachedResult <<<.ResultType>>>
    		cached, err := s.Cache.Get(ctx, "<<<$service.Name>>>.<<<.Name>>>", in, &cachedResult)
    		if err != nil {
    			return nil, err
    		}
    		if cached {
    			return &cachedResult, nil
    		}
    	}

    	var trailer metadata.MD

    	result, err := s.<<<$service.Name>>>Client.<<<.Name>>>(ctx, in, grpc.Trailer(&trailer))
    	if err != nil {
    		return nil, err
    	}
    	if s.Cache != nil {
    		if err := s.Cache.Store(ctx, "<<<$service.Name>>>.<<<.Name>>>", in, result, trailer); err != nil {
    			return nil, err
    		}
    	}
    	return result, nil
    }
	<<<end>>>
<<<end>>>
`))
